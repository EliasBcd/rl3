---
title: "Initiation à R"
subtitle: "L3 économie-finance"
author: "Elias Bouacida"
date: "2023-09-20"
format: 
  revealjs:
    embed-resources: true
editor: source
institute: "Université Paris 8"
bibliography: "Bibliographie.bib"
lang: fr
scrollable: true
execute: 
  echo: true
date-format: long
---



# Introduction générale

## R ?

- Est un langage de programmation tourné principalement vers l'analyse des données et les statistiques. <https://fr.wikipedia.org/wiki/R_(langage)>
- Dérive d'un langage antérieur appelé S <https://fr.wikipedia.org/wiki/S_(langage)>
- Est un [logiciel libre](https://fr.wikipedia.org/wiki/Logiciel_libre)

## Objectif du cours

- Apprendre à utiliser R et Rstudio
- Apprendre à utiliser les principales librairies (aussi appelées paquets) de R pour l'analyse de données et les statistiques (le [tidyverse](https://www.tidyverse.org/))
- Vous préparez à utiliser R dans d'autres cours (économétrie, séries temporelles, économie du travail)

## Déroulement du cours


- Une partie "cours" où nous discuterons des notions de programmation (en `R`)
- Une partie pratique où vous travaillerez sur machine

Le cours n'est pas noté, mais est validé par l'envoi de votre travail sur ordinateur.

Le seul prérequis pour suivre ce cours est d'avoir accès à `R` et RStudio sur un ordinateur.


## Installation de R {.scrollable}


Il s'agit de deux logiciels libres, gratuits, téléchargeables en ligne et fonctionnant sous Windows, Mac et Linux.

Pour installer `R`, il suffit de se rendre sur une des pages suivantes :

- [Windows](https://cloud.r-project.org/bin/windows/base/)
- [Mac](https://cloud.r-project.org/bin/macosx/) ^[Pour les possesseurs de MAC récents, à processeurs M1 ou M2, il faut utiliser la version *arm64*, les autres doivent prendre la version classique]
- Pour Linux, vous pouvez utiliser le gestionnaire de paquet du système ou bien suivre les instructions [ici](https://cran.r-project.org/bin/linux/ubuntu/) pour obtenir la dernière version de `R` (pour Ubuntu/Debian)

## RStudio

- Pour installer RStudio, rendez-vous sur [ici](https://www.rstudio.com/products/rstudio/download/#download) et installez la version Desktop (gratuite) adaptée à votre système.
- Il faut installer R **avant** d'installer RStudio, sinon RStudio vous enverra une erreur.
- Vous pouvez aussi utiliser la version en ligne [posit Cloud](https://posit.cloud/), qui est très similaire à Rstudio.
- Vous trouverez plus d'informations sur l'installation de R et Rstudio sur le [page Moodle](https://moodle.univ-paris8.fr/mod/page/view.php?id=272504) du cours.

## Cours

Le cours est construit à partir de deux ressources :

1. Le manuel de @Barnier (en français), que je vous conseille fortement de lire au fur et à mesure.
Il est disponible sur Moodle.
2. Les exercices développés par l'équipe @swirldev (en anglais) et traduits et adaptés pour le cours, disponibles sur ce [dépôt Github](https://github.com/EliasBcd/InitiationR)

Quand vous avez un problème avec R, vous pouvez généralement trouver sur internet la réponse à votre question. 
[Stackoverflow](https://stackoverflow.com/) est une bonne ressource pour commencer.

## Lancement de Rstudio

Une fois installé, pour lancer Rstudio, vous pouvez cliquer sur l'icône correspondante ![Logo RStudio](RStudio-Logo-Flat.png){width=10%} ou bien rechercher l'application RStudio sur votre ordinateur

# Introduction à R

## La console

Au premier lancement de RStudio, l'interface est organisée en trois grandes zones.

```{r, out.width='100%', echo=FALSE, fig.align='center'}
knitr::include_graphics("fenetreRStudio.png")
```


La zone de gauche se nomme **la Console**. 
À son démarrage, RStudio a lancé une nouvelle session de R et c'est dans cette fenêtre que nous allons pouvoir interagir avec lui.


## Console 

La Console affiche un texte de bienvenue suivi d'une ligne commençant par le caractère `>` (l'invite de commande). 

Fournissons une première commande, en saisissant le texte suivant et en appuyant sur `Entrée`.

```{r addition}
2+2
```

Le symbole `>` réapparaît, et nous pouvons lancer d'autres opérations :

```{r calculs}
5-7
4*12
-10/3
5^2
```

## Addition, Sousraction, Multiplication et Division


| Math          | code `R`    | Résultat    |
|:-------------:|:-------:|:---------:|
| $3 + 2$       | `3 + 2` | `r 3 + 2` |
| $3 - 2$       | `3 - 2` | `r 3 - 2` |
| $3 \times 2$    | `3 * 2` | `r 3 * 2` |
| $3 \div 2$       | `3 / 2` | `r 3 / 2` |

: Principales opérations arithmétiques

## Exposants



| Math          | code `R`    | Résultat    |
|:-------------:|:-------:|:---------:|
| $3^2$        | `3 ^ 2`         | `r 3 ^ 2`         |
| $2^{(-3)}$   | `2 ^ (-3)`      | `r 2 ^ (-3)`      |
| $100^{1/2}$  | `100 ^ (1 / 2)` | `r 100 ^ (1 / 2)` |
| $10^2$       | `1e2`           | `r 1e2`           |
| $\sqrt{100}$ | `sqrt(100)`     | `r sqrt(100)`     |

: Utilisation des puissances


## Constantes mathématiques 


| Math          | code `R`    | Résultat    |
|:------------:|:---------------:|:-----------------:|
| $\pi$        | `pi`            | `3.141593`            |
| $e$          | `exp(1)`        | `2.718282`        |

: Constantes mathématiques


## Logarithmes

Il n'y a pas de `ln()` dans `R`, mais on utilise `log()` pour désigner le logarithme naturel.  
`log10()` désigne le logarithme en base 10.  
`log(x, base)` désigne le logarithme en `base` quelconque.

| Math          | code `R`    | Résultat    |
|:------------:|:---------------:|:-----------------:|
| $\ln(e)$         | `log(exp(1))`       | `1`       |
| $\log_{10}(1000)$ | `log10(1000)`       | `3`       |
| $\log_{10}(1000)$ | `log(1000, 10)`       | `3`       |

: Logarithmes dans R

## Trigonometrie

| Math          | code `R`    | Résultat    |
|:------------:|:---------------:|:-----------------:|
| $\sin(\pi / 2)$ | `sin(pi / 2)` | `1` |
| $\cos(0)$       | `cos(0)`      | `1`      |

: Fonctions trigonométriques

## Espaces et codage

À de rares exceptions près, les espaces autour des commandes ne sont pas pris en compte.
Les 3 commandes suivantes sont équivalentes :

```{r espaces}
#| eval: false
10+2
10 + 2
10       +         2
```

La pratique standard est d'utiliser la deuxième ligne, afin d'avoir un code lisible.

## R bloqué

Il peut arriver qu'on saisisse une commande incomplète.
`R` remplace alors l'invite de commande `>` par un `+`.
Il attend qu'on lui donne des instructions.

```{r incomplet}
#| eval: false

> 4 *
+
```

On peut compléter la commande et appuyer sur `Entrée` ou annuler tout et appuyer sur `Echap` pour retourner à une invite de commande normale

# Objets 

## Objets

Nous savons utiliser `R` comme une calculatrice, pour une utilisation plus avancée, on peut stocker le résultat d'un calcul dans un **objet** à l'aide de l'opérateur d'assignation `<-`.
Cette "flèche" stocke ce qu'il y a à sa droite dans un objet dont le nom est indiqué à sa gauche.

```{r assignation}
x <- 2
```
Se lit "prend la valeur 2 et mets la dans un objet qui s'appelle `x`".

## Afficher la valeur d'un objet

Lors d'une opération d'assignation, R n'affiche pas le résultat de l'opération.
Si on exécute une commande comportant juste le nom d'un objet, `R` affiche son contenu.

```{r lecture}
x
```

::: {.notes}
Bien indiquer aux étudiants que l'assignation entraîne un non affichage du résultat.
:::

## Utilisation d'un objet

On peut évidemment réutiliser cet objet dans d'autres opérations : `R` le remplacera alors par sa valeur.
```{r valeur}
x+4
```

---

On peut créer autant d'objets qu'on le souhaite.

```{r multiple_objets}
x <- 2
y <- 5
resultat <- x + y
resultat
```

---

Si on assigne une nouvelle valeur à un objet, la valeur précédente est perdue.

```{r nouvelle_assignation}
x <- 2
x <- 5
x
```

---

Assigner un objet à un autre  copie juste la valeur de l'objet de droite dans celui de gauche

```{r copie}
x <- 1
y <- 3
x <- y
x
```

# Types

## Chaîne de caractères

Les objets peuvent contenir tout un tas d'informations.
Les valeurs prises peuvent être de différentes **types**.

Jusqu'ici on n'a stocké que des nombres, mais ils peuvent aussi contenir des *chaînes de caractères* (du texte), qu'on délimite avec des guillemets simples ou doubles (`'` ou `"`) :

```{r chaines}
chien <- "Chihuahua"
chien
```

## Conditions logiques (booléens)

Ou des *conditions logiques* (`TRUE` ou `FALSE`) basées sur des comparaisons :

```{r booleen}
valeur <- TRUE
valeur

chien == "Doberman"
3<2
```

On appelle `TRUE` et `FALSE` des booléens.

## Opérateurs logiques {.smaller}

| Opérateur | Résumé | Exemple | Résultat |
|:---------|:---------------------:|:---------------------:|:-------:|
| `x < y`  | `x` plus petit que `y`                | `3 < 42`               | `r 3 < 42`               |
| `x > y`  | `x` plus grand que `y`             | `3 > 42`               | `r 3 > 42`               |
| `x <= y` | `x` plus petit ou égal à `y`    | `3 <= 42`              | `r 3 <= 42`              |
| `x >= y` | `x` plus grand ou égal à `y` | `3 >= 42`              | `r 3 >= 42`              |
| `x == y` | `x` égal à `y`                  | `3 == 42`              | `r 3 == 42`              |
| `x != y` | `x` non égal à `y`              | `3 != 42`              | `r 3 != 42`              |
| `!x`     | non `x`                          | `!(3 > 42)`            | `r !(3 > 42)`            |
| `x | y`  | `x` ou `y`     |     `(3 > 42) || TRUE`[^1]  | `r TRUE`      |
| `x & y`  | `x` et `y`                      | `(3 < 4) && ( 42 > 13)`^1^ | `r (3 < 4) & ( 42 > 13)` |

[^1]: On peut en fait utiliser `|` ou `||` et `&` ou `&&`, mais leur comportement diffère avec des vecteurs.
L'opérateur doublé est conçu pour les cas où il n'y a à gauche et a droite qu'une seule valeur logique (donc pas pour les vecteurs).

# Vecteurs

## Vecteurs

Imaginons qu'on a demandé la taille en centimètres de 5 personnes et qu'on souhaite calculer leur taille moyenne.

On pourrait créer autant d'objets que de tailles et calculer la moyenne :

```{r vecteurs}
taille1 <- 156
taille2 <- 164
taille3 <- 197
taille4 <- 147
taille5 <- 173
(taille1 + taille2 + taille3 + taille4 + taille5) / 5
```

---

Ce n'est clairement pas pratique du tout. On va plutôt stocker l'ensemble de nos tailles dans un seul objet, un **vecteur**, avec la syntaxe suivante :

```{r tailles}
tailles <- c(156, 164, 197, 147, 173)
```

où le `c()` veut dire "combine les valeurs suivantes dans un vecteur".

---

Si on affiche le contenu de cet objet, on voit qu'il contient bien l'ensemble des tailles saisies.

```{r affichage_tailles}
tailles
```


## Opérations sur les vecteurs

L'avantage d'un vecteur est que lorsqu'on lui applique une opération, celle-ci s'applique à toutes les valeurs qu'il contient.
Ainsi, si on veut la taille en mètres plutôt qu'en centimètres :

```{r tailes_m}
tailles_m <- tailles / 100
tailles_m
```

...

Cela fonctionne pour toutes les opérations de base.

```{r op_vec}
tailles + 10
tailles^2
```

## Opérations vectorielles

Imaginons maintenant qu'on a aussi demandé aux cinq mêmes personnes leur poids en kilos. On peut créer un deuxième vecteur :

```{r poids}
poids <- c(45, 59, 110, 44, 88)
```

...

On peut alors effectuer des calculs utilisant nos deux vecteurs `tailles` et `poids`. 
On peut par exemple calculer l'indice de masse corporelle (IMC) de chacun de nos enquêtés en divisant leur poids en kilo par leur taille en mètre au carré :

```{r imc}
imc <- poids / (tailles / 100) ^ 2
imc
```

## Autre type dans un vecteur

Un vecteur peut contenir n'importe quel type d'objet.
Imaginons qu'on a demandé aux 5 mêmes personnes leur niveau de diplôme : on peut regrouper l'information dans un vecteur de *chaînes de caractères*.
Une chaîne de caractère contient du texte libre, délimité par des guillemets simples ou doubles.

```{r  diplome}
diplome <- c("CAP", "Bac", "Bac+2", "CAP", "Bac+3")
diplome
```


## Vecteurs de nombres consécutifs

L'opérateur `:`, lui, permet de générer rapidement un vecteur comprenant tous les nombres entre deux valeurs, opération assez courante sous R :

```{r sequence}
x <- 1:10
x
```

## Accès à un élément

Enfin, notons qu'on peut accéder à un élément particulier d'un vecteur en faisant suivre le nom du vecteur de crochets contenant le numéro de l'élément désiré.

```{r lecture_vecteur}
diplome[2]
```

Cette opération, qui utilise l'opérateur `[]`, permet donc la sélection d'éléments d'un vecteur.

## Vecteurs dans la console

Dernière remarque, si on affiche dans la console un vecteur avec beaucoup d'éléments, ceux-ci seront répartis sur plusieurs lignes.
Par exemple, si on a un vecteur de 50 nombres on peut obtenir quelque chose comme :

     [1] 294 425 339 914 114 896 716 648 915 587 181 926 489
    [14] 848 583 182 662 888 417 133 146 322 400 698 506 944
    [27] 237 324 333 443 487 658 793 288 897 588 697 439 697
    [40] 914 694 126 969 744 927 337 439 226 704 635

R ajoute systématiquement un nombre entre crochets au début de chaque ligne : il s'agit en fait de la position du premier élément de la ligne dans le vecteur.
Ainsi, le 848 de la deuxième ligne est le 14e élément du vecteur, le 914 de la dernière ligne est le 40e, etc.

Ceci explique le `[1]` qu'on obtient quand on affiche un simple nombre^[Et permet de constater que pour R, un nombre est un vecteur à un seul élément.] :

     [1] 4

## Listes

Les éléments d'un vecteur sont forcément du même types.
Si on veut mélanger le poids et le nom de différents chiens dans un même vecteur, le résultat n'est pas vraiment ce que vous attendez.

```{r listes}
chiens <- c("Chihuahua", 5, "Doberman", 15)
chiens
```

::: {.notes}
Remarquer que `R` met des guillemets autour des nombres : il les a transformés en chaînes de caractères.
:::

---

Pour pouvoir combiner des nombres et des chaînes de caractères, il faut utiliser des listes, à l'aide de la fonction `list()`.

```{r listes2}
liste_chiens <- list("Chihuahua", 5, "Doberman", 15)
liste_chiens
```

Nous verrons les listes plus en détails plus tard.
Remarquez à ce stade la présence de double crochets `[[ ]]`, qui nous indique que nous faisons face à une liste.

## Quel type ?

Il n'est pas toujours facile de savoir à quel type nous faisons face.
Deux fonctions nous aident pour cela. 
La première est la fonction `typeof()`.

```{r type}
typeof(chiens)
typeof(liste_chiens)
```

La seconde la fonction `str()`

```{r structure}
str(chiens)
str(liste_chiens)
```

::: {.notes}
Remarquer que `typeof()` utilisée sur une liste renvoi le type de l'objet global (`list`), élément par élément, alors que `str()` nous renvoit le type des éléments dans la liste, un par un.
:::

# Fonctions

# À vous !

## Swirl {.scrollable}

Le moment est venu de mettre en pratique ce que nous avons vu.

La première chose à faire est d'installer le paquet `swirl`.
Pour cela, copier-coller les lignes suivantes dans la console et taper `Entrée`.

```{r swirl}
#| eval: false
install.packages('swirl')
library(swirl)
```

Nous allons maintenant indiquer à `swirl` que nous souhaitons le voir en français

```{r french}
#| eval: false
select_language('french', append_rprofile = T)
```

## Cours et leçons swirl

- `swirl` est un paquet (nous verrons cette notion plus tard) `R` qui vous permet de vous exercer de manière interactive avec `R`.
- Chaque cours `swirl` est organisé en leçons centrée sur une notion précise.
- Vous pouvez vous procurer le cours sur Github, à cette adresse <https://github.com/EliasBcd/InitiationR>. Vous pouvez le faire directement dans `R`, à l'aide de la commande suivante :

```{r lecon}
#| eval: false
install_course_github("EliasBcd", "InitiationR")
```

## Lancer une leçon {.smaller}

Vous pouvez ensuite lancer le cours en tapant la commande suivante :

```{r lancement_swirl}
#| eval: false
swirl()
```

- L'invite de commande dialogue avec vous ! Elle vous demande un nom.  
- Tapez-le et gardez-le même tout au long du cours.^[Votre numéro d'étudiant, ou votre prénom et votre nom, il faut que je puisse vous identifier par la suite.] Appuyez sur `Entrée`.  
- Lisez bien ce que `R` vous raconte et suivez ces instructions.
- Quand `R` vous demande choisir un cours, tapez le nombre correspondant au cours "InitiationR" et appuyez sur `Entrée`.
- Ensuite choisissez la première leçon (qui devrait être "Manipulations simples").
- Suivez maintenant les instructions de R dans l'invite de commande.

## Fin d'une leçon

À la fin d'une leçon, `swirl` va vous proposer de soumettre votre progression.

Tapez le numéro correspondant à "Oui", `R` devrait ouvrir votre navigateur internet sur une page Moodle ou vous pouvez soumettre le fichier `.txt` de la leçon que vous avez faites.



## Réinstaller un cours

Si pour une raison ou pour une autre il y a besoin de réinstaller le cours, tapez les commande suivante :

```{r reinstallation}
#| eval: false
uninstall_course("InitiationR")
install_course_github("EliasBcd", "InitiationR")
```





# Références

## Bibliographie
