- Class: meta
  Course: Introduction à R
  Lesson: Logique
  Author: Elias Bouacida
  Type: Standard
  Organization: Université Paris 8
  Version: 2.4.5

- Class: text
  Output: Cette leçon introduit les opérateurs et opérations logiques dans R.
  
- Class: text
  Output: Comme nous l'avons déjà vu, il y a deux valeurs logique dans R, aussi
    appelé valeurs booléennes, TRUE et FALSE. 
    Dans R, il est possible de créer des expressions logiques dont le résultat
    sera TRUE ou FALSE.

- Class: cmd_question
  Output: La création d'expressions logiques nécessite des opérateurs logiques.
    Nous avons déjà vu les opérateurs arithmétiques tel que `+`, `-`, `*` et `/`.
    Le premier opérateur logique à connaître est l'égalité, représenté par deux
    signes égalités `==`.
    Essayez d'utiliser cet opérateur pour trouver si TRUE et TRUE sont égaux.
  CorrectAnswer: TRUE == TRUE
  AnswerTests: omnitest(correctExpr='TRUE == TRUE')
  Hint: Utilisez l'opérateur d'égalité et tapez TRUE == TRUE.
  
- Class: text
  Output: Tout comme les expressions arithmétiques, les expressions logiques 
    peuvent être regroupées à l'aide de parenthèses et indiquer ainsi les priorités
    de calcul. 
    Par exemple, le résultat de l'expression (TRUE == TRUE) == TRUE sera bien 
    TRUE.
    
- Class: cmd_question
  Output: Testons cette propriété, essayez d'évaluer (FALSE == TRUE) == FALSE .
  CorrectAnswer: (FALSE == TRUE) == FALSE
  AnswerTests: omnitest(correctExpr='(FALSE == TRUE) == FALSE')
  Hint: Tapez (FALSE == TRUE) == FALSE
  
- Class: cmd_question
  Output: L'opérateur d'égalité peut aussi servir à comparer des nombres.
    Utilisez-le pour savoir si 6 et 7 sont égaux.
  CorrectAnswer: 6 == 7
  AnswerTests:  any_of_exprs('6 == 7', '7 == 6')
  Hint: Utilisez l'opérateur d'égalité et tapez 6 == 7.
  
- Class: text
  Output: Le résultat de l'expression précédente est FALSE, parce 6 est plus
    petit que 7. 
    Heureusement pour nous, nous pouvons aussi tester les inégalités pour savoir
    si un nombre est plus petit ou plus grand qu'un autre.
    
- Class: cmd_question
  Output: L'opérateur plus petit que `<` teste si le nombre à gauche de 
    l'opérateur est plus petit que le nombre à droite. 
    Tapez une expression pour tester si 6 et plus petit que 7.
  CorrectAnswer: 6 < 7
  AnswerTests: omnitest(correctExpr='6 < 7')
  Hint: Utilisez l'opérateur 'plus petit que' et tapez 6 < 7.
  
- Class: cmd_question
  Output: Il existe aussi un opérateur plus petit ou égal à `<=` qui teste si
    l'expression à gauche est plus petite ou égale à l'expression à droite.
    Essayez de voir si 10 est plus petit ou égal à 10.
  CorrectAnswer: 10 <= 10
  AnswerTests: omnitest(correctExpr='10 <= 10')
  Hint: Utilisez l'opérateur `<=` et tapez 10 <= 10.
  
- Class: text
  Output: On peut aussi utiliser les opérateurs plus grand que `>` et plus 
    grand ou égal à `>=`.
    

- Class: mult_question
  Output: Voyons si vous avez compris. 
    Laquelle des expressions suivantes à pour résultat FALSE ?
  CorrectAnswer: 9 >= 10
  AnswerChoices: 9 >= 10; 7 == 7; 6 < 8; 0 > -36 
  AnswerTests: omnitest(correctVal='9 >= 10')
  Hint: Vous pouvez, si vous en avez besoin, essayez chaque expression dans R
    pour trouver le bon résultat.
    
- Class: mult_question
  Output: Et maintenant, laquelle des expressions suivantes à pour résultat 
    TRUE ?
  CorrectAnswer: 9 >= 10
  AnswerChoices: 9 >= 10; 7 == 9; 57 < 8; -6 > -7 
  AnswerTests: omnitest(correctVal='-6 > -7')
  Hint: Vous pouvez, si vous en avez besoin, essayez chaque expression dans R
    pour trouver le bon résultat.
    
- Class: cmd_question
  Output: Intéressons maintenant à l'opérateur 'non-égal' (=différent) représenté
    par `!=`.
    Différent teste si deux valeurs sont différentes, de telle sorte que le résultat
    de TRUE != FALSE est TRUE.
    Tout comme l'opérateur égalité, l'opérateur différent de s'utilise aussi avec
    des nombres.
    Essayez d'écrire une expression pour savoir si 5 est différent de 7.
  CorrectAnswer: 5 != 7
  AnswerTests:  any_of_exprs('5 != 7', '7 != 5')
  Hint: Utilisez l'opérateur différent de est tapez 5 != 7.
  
- Class: cmd_question
  Output: "Il peut être utile de 'négativer' une expression avec l'opérateur NON.
    Un point d'exclamation `!` inversera les évaluations de TRUE et FALSE, de 
    telle sorte que la valeur de !TRUE (dire : non TRUE) est FALSE et que la
    valeur de !FALSE (non FALSE) est TRUE.
    Essayez d'utiliser l'opéraeur NON pour trouver l'inverse de 5 est égal à 7."
  CorrectAnswer: '!5 == 7'
  AnswerTests: any_of_exprs('!5 == 7', '!(5 == 7)', '!7 == 5', '!(7 == 5)')
  Hint: Cette question est peut-être un peu difficile, pensez à la négation de 
    l'expression 5 == 7 (vous avez seulement besoin d'un point d'exclamation
    devant).

- Class: text
  Output: Récapitulons.
    L'opérateur égal `==` teste si deux valeurs sont égales.
    L'opérateur différent de `!=` teste si deux valeurs sont différentes.
    L'opérateur NON `!` négative une expression logique de telle manière que
    TRUE devient FALSE et FALSE devient TRUE.

- Class: mult_question
  Output: Laquelle des expressions suivante est FALSE ?
  CorrectAnswer: "!(0 >= -1)"
  AnswerChoices: "!(0 >= -1); !FALSE; 7 != 8; 9 < 10"
  AnswerTests: omnitest(correctVal='!(0 >= -1)')
  Hint: Vous pouvez, si vous en avez besoin, essayez chaque expression dans R
    pour trouver le bon résultat.
    
- Class: mult_question
  Output: 'Quel est à votre avis le résultat de l'expression suivante :
    (TRUE != FALSE) == !(6 == 7)'
  CorrectAnswer: TRUE
  AnswerChoices: TRUE; FALSE; Y a-t-il une vérité objective dans la programmation ?; %>%
  AnswerTests: omnitest(correctVal='TRUE')
  Hint: Essayez d'évaluer les expressions indépendamment pour trouver le résultat.
  
- Class: text
  Output: Il est parfois nécessaire d'examiner les relations entre plusieurs
    expressions logiques.
    C'est alors qu'il peut être necessaire d'avoir les opérateurs ET (AND) et OU (OR).

