- Class: meta
  Course: Introduction à R
  Lesson: Assignations et types
  Author: your name goes here
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.5

- Class: text
  Output: "Nous commençons maintenant la partie 'langage de programmation de R'.
Une possilibité très importante dans tout langage de programmation est la possibilité d'assigner une valeur à une variable.
Cela permet de la sauvegarder pour plus tard.
Nous pouvons ensuite faire des opérations sur cette variable."

- Class: cmd_question
  Output: "Commençons simplement.
Nous cherchons à assigner à la variable x la valeur 2.
L'opérateur d'assignation dans R est la flèche vers la gauche : <-.
Elle symbolise ce qu'elle fait, on assigne à ce qui est à gauche ce qui est à droite.
Pour assigner 2 à x, il suffit de taper x <- 2."
  CorrectAnswer: x <- 2
  AnswerTests: omnitest(correctExpr='x <- 2')
  Hint: Taper x <- 2

- Class: cmd_question
  Output: "Taper maintenant x."
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Taper simplement x dans la console.

- Class: text
  Output: "R a sauvegardé 2 dans la variable x.
Remarquer que R n'a pas affiché de valeur au moment de l'assignation.
Il faut taper la variable seule pour afficher sa valeur.
Deuxième remarque importante : il est possible d'utiliser = comme opérateur d'assignation
(x = 2 fonctionne exactement comme x <- 2) mais c'est généralement considéré comme une mauvaise pratique de code, pour une raison qui vous apparaîtra plus tard.
Enfin, Rstudio offre un raccourci pour taper <-. 
C'est généralement  alt + -.
Je vous encourage à l'utiliser dès maintenant."

- Class: cmd_question
  Output: "On peut faire des opérations sur les variables exactement comme on le ferait sur des valeurs.
Essayer de taper x^2"
  CorrectAnswer: x^2
  AnswerTests: omnitest(correctExpr='x^2')
  Hint: Taper x^2

- Class: cmd_question
  Output: "On peut assigner évidemment assigner plusieurs variables dans une même session.
Essayer d'assigner 4 à y"
  CorrectAnswer: y <- 4
  AnswerTests: omnitest(correctExpr='y <- 4')
  Hint: Taper y <- 4

- Class: cmd_question
  Output: "Et faire des opérations sur les variables comme on le ferait sur des valeurs.
Essayer d'additionner x et y."
  CorrectAnswer: x + y
  AnswerTests: omnitest(correctExpr='x + y')
  Hint: Taper x + y

- Class: cmd_question
  Output: "Si on assigne plusieurs  valeur l'une après l'autre à une variable, seule la dernière est prise en compte.
  Si maintenant vous taper x <- 5"
  CorrectAnswer: x <- 5
  AnswerTests: omnitest(correctExpr='x <- 5')
  Hint: Taper x <- 5
  
- Class: cmd_question
  Output: "x prend la valeur 5. 
  Essayer de taper x"
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Taper x

- Class: text
  Output: "Plusieurs remarques sur les noms de variables.
  La casse est importante, y et Y sont deux variables différentes.
  Un nom de variable ne peut pas commencer par un chiffre, mais peut en contenir.
  2 n'est pas un nom de variable, pas plus que 2x, mais x et x2 en revanche le sont.
  Les caractères spéciaux ne marchent généralement pas dans les noms de variables, en dehors de _ et -.
  deux_poids est un nom de variable admissible, mais pas deux%poids, par exemple."

- Class: text
  Output: "Nous avons pour l'instant utilisé un seul type de valeur : des valeurs numériques.
  Il en existe en fait d'autres.
  Pour en donner quelques-uns des plus importants : les booléens, les caractères, les vecteurs, les listes et les data.frames.
  Il y en a pleins d'autres."

- Class: cmd_question
  Output: "Les booléens sont simples, il y a deux valeurs possibles : TRUE et FALSE (abrégé parfois en T et F).
Ils nous servirons beaucoup plus tard, pour l'instant, taper simplement T."
  CorrectAnswer: T
  AnswerTests: omnitest(correctExpr='T')
  Hint: Taper T
  
- Class: cmd_question
  Output: "Les booléens sont généralement obtenu après une comparaison.
  Essayez de taper 3>2"
  CorrectAnswer: 3>2
  AnswerTests: omnitest(correctExpr='3>2')
  Hint: Taper 3>2
  
- Class: text
  Output: "On obtient TRUE!"

# - Class: mult_question
#   Output: "Si on tape 3 < 2, que devrait-on obtenir ?"
#   PossibleAnswer: c(T, F)
#   CorrectAnswer: F
#   AnswerTests: omnitest()

- Class: cmd_question
  Output: "Un autre type de valeur importante sont les caractères. 
  Les chaînes de caractères sont entre guillemets  ou '.
  Assigner le nom du cours à la variable nom."
  CorrectAnswer: nom <- "Introduction à R"
  AnswerTests: omnitest()
  Hint: Taper nom <- "Introduction à R"

- Class: text
  Output: "Nous aurons un chapitre dédié au -- chaîne de -- caractères."
  
- Class: cmd_question
  Output: "Imaginons qu'on a demandé la taille en centimètres de 5 personnes et qu'on souhaite calculer leur taille moyenne.
On pourrait créer autant d'objets que de tailles et calculer la moyenne.
Commençons par assigner 156 à taille1."
  CorrectAnswer: taille1 <- 156
  AnswerTests: omnitest()
  Hint: "Taper taille1 <- 156"
  
- Class: cmd_question
  Output: "Puis 164 à taille2"
  CorrectAnswer: taille2 <- 164
  AnswerTests: omnitest()
  Hint: "Taper taille2 <- 164"
  
- Class: cmd_question
  Output: "Puis 197 à taille3"

(taille1 + taille2 + taille3 + taille4 + taille5) / 5
Essayer.
"
  CorrectAnswer: taille3 <- 197
  AnswerTests: omnitest()
  Hint: "Taper taille3 <- 197"

- Class: cmd_question
  Output: "Nous pouvons alors calculer la moyenne en divisant la somme de ces 3 tailles par 3. 
  Essayer."
  CorrectAnswer: (taille1 + taille2 + taille3) / 3"
  AnswerTests: omnitest()
  Hint: "Taper (taille1 + taille2 + taille3) / 3"

- Class: cmd_question
  Output: "Un autre type de valeur importante est les vecteurs. 
  La commande classique pour créé un vecteur est la commande c().
  Par exemple, c(10, 20) est un vecteur. 
  On peut assigner ce vecteur à x. 
  Essayer."
  CorrectAnswer: x <- c(10, 20)
  AnswerTests: omnitest()
  Hint: Taper x <- c(10, 20)

- Class: cmd_question
  Output: "On accède à un élément d'un vecteur en donnant sa position entre crochets [].
  Si vous souhaitez accéder au deuxième élément du vecteur x, il faut taper x[2]"
  CorrectAnswer: x[2]
  AnswerTests: omnitest()
  Hint: Taper x[2]
  
- Class: text
  Output: "Il y a de nombreuses autres manières de construire des vecteurs, en particulier des vecteurs de numériques.
  Nous les verrons en temps voulu."
  
- Class: cmd_question
  Output: "Un type de variable similaire aux vecteurs est la liste.
  Une liste est essentiellement un vecteur ou les valeurs ont des noms, si elles sont explicitement nommés, ou des numéros.
  Une liste est créée grâve à la commande list()
  Dans une liste intitulée identitée, vous pouvez nommer le nom, le prénom et l'âge.
  Essayer identite <- list(nom = votre_nom, prenom = votre_prenom, age = votre_age)."
  CorrectAnswer: identite <- list(nom = "Doe", prenom = "John", age = 32)
  AnswerTests: omnitest()
  Hint: Taper identite <- list(nom = "Doe", prenom = "John", age = 32)
  
- Class: text
  Output: "Remarquer que le nommage des variables fonctionne essentiellement comme une assignation, mais qui n'est valable qu'au sein de la liste.
  Si vous essayez de taper nom dans l'invite de commande, vous obtiendrez une erreur. # Would be nice to able to make that work.
  Pour faire cette assignation au sein d'une liste, vous devez utiliser le signe =, <- ne marchera pas.
  "
  
- Class: cmd_question
  Output: "Il est possible de nommer"
  CorrectAnswer: identite <- list(nom = "Doe", prenom = "John", age = 32)
  AnswerTests: omnitest()
  Hint: Taper identite <- list(nom = "Doe", prenom = "John", age = 32)
    
