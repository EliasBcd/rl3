---
title: "Boucle et évaluation conditionnelle"
subtitle: "L3 économie-finance"
author: "Elias Bouacida"
format: revealjs
lang: fr
institute: "Université Paris 8"
scrollable: true
date: today
self-contained: false
execute: 
  eval: false
  echo: true
---

## Introduction

2 outils pour contrôler l'évaluation :

1. Les évaluations conditionnelles
1. les boucles

# Conditions

## Condition `if`

Deux types de conditions `if` :

```{r}
if (condition) action_true
if (condition) action_true else action_false
```

## Condition typique


Exemple :

```{r}
mention <- function(x) {
  if (x > 16) {
    "Très bien"
  } else if (x > 14) {
    "Bien"
  } else if (x > 12) {
    "Assez bien"
  } else {
    ""
  }
}
```

---

`if` renvoi un résultat, il est donc possible d'assigner le résultat :


```{r}
#| eval: true
x1 <- if (TRUE) 1 else 2
x2 <- if (FALSE) 1 else 2

c(x1, x2)
```

Quand `else` n'est pas explicitement renseigné mais la condition est fausse, `if` renvoi `NULL`.

## Et si condition n'est pas `TRUE` ou `FALSE` ?

```{r}
#| eval: true
#| error: true
if ("x") 1
if (logical()) 1
if (NA) 1
if (c(TRUE, FALSE)) 1
```

## `if` vectoriel : `ifelse()`

Dans le cas où vous avez besoin de conditions vectorielles, il faut utiliser `ifelse()` :

```{r}
#| eval: true
x <- 1:10
ifelse(x %% 5 == 0, "XXX", as.character(x))
ifelse(x %% 2 == 0, "even", "odd")
```

Les valeurs manquantes seront propagée à la sortie

## `switch()`

On peut remplacer ceci :

```{r}
x_option <- function(x) {
  if (x == "a") {
    "option 1"
  } else if (x == "b") {
    "option 2" 
  } else if (x == "c") {
    "option 3"
  } else {
    stop("Invalid `x` value")
  }
}
```

Par ceci :

```{r}
x_option <- function(x) {
  switch(x,
    a = "option 1",
    b = "option 2",
    c = "option 3",
    stop("Invalid `x` value")
  )
}
```

Le dernier composant de `switch()` doit renvoyer une erreur, sinon les conditions non vérifiées renverront `NULL`, ce qui est rarement le comportement désiré.
C'est à ça que sert `stop()`.

::: {.notes}
Préciser l'utilisation de `stop()`
:::

# Boucles

## Boucles `for`

La boucle la plus simple est la boucle `for` :

```{r}
for (item in vecteur) faire_action
```

Exemple :

```{r}
#| eval: true
for (i in 1:3) {
  print(i)
}
```

Notes : l'assignation à `i` se fait dans l'environnement courant, changeant la valeur de l'objet :

```{r}
#| eval: true
i <- 100
for (i in 1:3) {}
i
```

## Interruption anticipée

On peut interrompre l'exécution d'une boucle `for` de manière anticipée :

- `next` sort de l'itération actuelle
- `break` sort de la boucle `for` en entier

```{r}
#| eval: true
for (i in 1:10) {
  if (i < 3) 
    next

  print(i)
  
  if (i >= 5)
    break
}
```

## Boucles alternatives

Vous ne savez pas toujours à l'avance les valeurs sur lesquelles vous allez itérer. 
Vous pouvez alors utiliser :

- `while(condition) action` : l'`action` est effectuée tant que la `condition` est `TRUE`
- `repeat(action)` : répète l'`action` indéfiniment (tant que `break` n'apparaît pas en fait).

`for` est moins flexible que `while` qui est moins flexible que `repeat`, mais il vaut mieux utiliser la version la moins flexible.