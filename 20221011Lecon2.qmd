---
title: "Paquets, graphiques et analyse de données"
subtitle: "L3 économie-finance"
author: "Elias Bouacida"
format: revealjs
lang: fr
institute: "Université Paris 8"
scrollable: true
date: today
self-contained: true
---


```{r setup, include=F}
knitr::opts_chunk$set(echo = TRUE)
```

# Paquets

## Installer et charger des extensions (packages)

- L'installation de base de R permet de faire énormément de choses, mais le langage dispose en plus d'un système d'extensions permettant d'ajouter facilement de nouvelles fonctionnalités. La plupart des extensions sont développées et maintenues par la communauté des utilisateurs et utilisatrices de R, et diffusées via un réseau de serveurs nommé CRAN (Comprehensive R Archive Network).
- Pour installer une extension, si on dispose d'une connexion Internet, on peut 
    - Cliquer sur le bouton Install de l'onglet Packages de RStudio.
    - Il suffit alors d'indiquer le nom de l'extension dans le champ Package et de cliquer sur Install.
    
- On peut aussi installer des extensions en utilisant la fonction `install.packages()` directement dans la console. Par exemple, pour installer le package `ggplot2` on peut exécuter la commande    

```{r eval=FALSE}
install.packages(ggplot2)
```

- Une fois l'extension installée, il faut la “charger” avant de pouvoir utiliser les fonctions qu'elle propose.
Ceci se fait avec la fonction `library()`. 
Par exemple, pour pouvoir utiliser les fonctions de `ggplot2`, vous devrez exécuter la commande suivante :

```{r eval=FALSE}
library(ggplot2)
```

- Vous avez déjà rencontré ces commandes quand nous avons installé et commencé à utiliser `swirl`.

. . .

On regroupe en général en début de script toute une série de commandes `library()` qui permettent de charger tous les packages utilisés dans le script.
Quelque chose comme :

```{r}
library(ggplot2)
library(haven)
library(tidyr)
```

# Premier travail avec les données

## Données d'exemple

Nous utiliserons dans ce cours des données issues de l'INSEE : la base "[Histoires de vie 2003](https://www.insee.fr/fr/statistiques/2532244)"

La base est disponible au format `.csv` à l'adresse suivante [https://raw.githubusercontent.com/P8EcoGe/rl3/main/bases/hdv3.csv](https://raw.githubusercontent.com/P8EcoGe/rl3/main/bases/hdv3.csv)

Vous pouvez la charger directement dans `R` à l'aide de la commande `read.csv()`. On va la placer dans un objet nommé `hv3` : 

```{r}
hv3 <- read.csv("https://raw.githubusercontent.com/P8EcoGe/rl3/main/bases/hdv3.csv")
```

Alternativement, vous pouvez enregistrer le fichier sur votre disque dur, puis le charger dans `R` avec :

```{r eval=FALSE}
hv3 <- read.csv("chemin_vers_le_fichier/hdv3.csv")
```

Vous pouvez voir dans l'onglet "Environment" que la base de donnée comprend 2000 observations, et 21 variables.

Si vous souhaitez voir le contenu de la base, vous pouvez utiliser la commande `View()` : 
```{r eval=FALSE}
View(hv3)
```


## Structure de la base

Un tableau étant un objet comme un autre, on peut lui appliquer des fonctions. 
Par exemple, `nrow()` et `ncol()` retournent le nombre de lignes et de colonnes du tableau.
`dim()` renvoie les deux :

```{r}
nrow(hv3)
ncol(hv3)
dim(hv3)
```

La fonction `names()` retourne les noms des colonnes du tableau, c'est-à-dire la liste de nos variables.

```{r}
names(hv3)
```

Enfin, la fonction `str()` renvoie un descriptif plus détaillé de la structure du tableau. 
Elle liste les différentes variables, indique leur type et affiche les premières valeurs.

```{r}
str(hv3)
```


## Accéder aux variables, et en créer de nouvelles

On se réfère aux variables à l'aide de l'opérateur `$`, qui permet d'accéder aux colonnes du tableau. 
On utilisera la syntaxe `nom_de_la_base$nom_de_la_variable` pour désigner une variable particulière d'une base de données.

Par exemple, on peut utiliser la fonction `head()` pour afficher les premières valeurs de la variable `age` de la base stockée dans l'objet `hv3`.

```{r}
head(hv3$age)
```

On peut aussi utiliser l'opérateur `$` pour créer une nouvelle variable dans notre base : pour cela, il suffit de lui assigner une valeur.

Par exemple, la variable `heures.tv` contient le nombre d'heures passées quotidiennement devant la télé.

```{r}
head(hv3$heures.tv)
```

On peut vouloir créer une nouvelle variable dans notre tableau qui contienne la même durée convertie en minutes. 

On va donc créer une nouvelle variables `minutes.tv` de la manière suivante :

```{r}
hv3$minutes.tv <- hv3$heures.tv * 60
```

On peut alors constater, qu'une nouvelle variable (une nouvelle colonne) a bien été ajoutée à la base de données.

```{r}
head(hv3$minutes.tv)
```


## Analyse univariée

---

### Variable quantitative

Une variable quantitative est une variable de type numérique (un nombre) qui peut prendre un grand nombre de valeurs. On en a plusieurs dans notre jeu de données, notamment l'âge (variable `age`) ou le nombre d'heures passées devant la télé (`heures.tv`).

---

### Indicateurs numériques

Pour obtenir un résumé numérique concis d'une variable numérique, on peut utiliser la commande `summary()` : 

```{r}
summary(hv3$heures.tv)
summary(hv3$age)
```

`summary()` donne le minimum, le maximum, la moyenne, les premier second (médiane) et troisième quartile de la distribution. La dernière valeur donne, s'il y en a, le nombre de valeurs manquantes (`NA`) pour la variable. 

On peut également obtenir (et, si on le souhaite, sauver dans un objet) les valeurs de chaque élément avec les fonction `min()`, `max()`, `median()`, `mean()` et `quantile()` : 

```{r}
min(hv3$age)
max(hv3$age)
mean(hv3$age)
median(hv3$age)
quantile(hv3$age, prob=0.75) # l'option "prob=" permet de préciser le quantile souhaité
```

---

Si la variable examinée contient des valeurs manquante, il convient d'inclure l'option `na.rm=TRUE` dans l'appel de la fonction : 

```{r}
mean(hv3$heures.tv)
mean(hv3$heures.tv, na.rm=TRUE)
```

On peut obtenir des indicateurs de dispersion (variance, écart-type) à l'aide des commandes `var()` et `sd()` : 



```{r}
var(hv3$age)
sd(hv3$age)
```





# Représentations graphiques

## ggplot2

La librairie (paquet) `R` la plus utilisée pour faire des représentations graphiques est [ggplot2](https://ggplot2.tidyverse.org/).
C'est une librairie issue du `tidyverse`, un ensemble de librairies `R` destinées au traitement de données.


## Un histogramme

La représentation graphique la plus courante pour présenter la distribution d'une variable quantitative continue est l'histogramme.
Un graphique `ggplot2` commence par la fonction `ggplot()`.
Le premier argument doit être l'ensemble de données utilisée (en général un `data.frame` ou une autre forme de tableau). 
Le second argument est `aes()` et contient en général la variable que vous voulez mettre en abscisse, précédent du mot-clé `x`.
On donne ensuite à `ggplot()` le type de graphique que l'on souhaite utiliser (ici un histogramme en utilisant `geom_histogram()`, après un `+`) :

:::: {.columns}

::: {.column width=60%}
```{r code-first, fig.show="hide", warning=FALSE}
library(ggplot2)

ggplot(hv3, aes(x=age)) +
  geom_histogram()
```
:::

::: {.column width=40%}
```{r, echo=FALSE}
knitr::include_graphics(
  knitr::fig_chunk("code-first", "png")
)
```
:::

::::


---

:::: {.columns}

::: {.column width=60%}
On peut faire varier le nombre de catégories.

```{r code-second, fig.show="hide", warning=FALSE}
ggplot(hv3, aes(x=age)) +
  geom_histogram(bins=10)
```
:::

::: {.column width=40%}
```{r, echo=FALSE}
knitr::include_graphics(
  knitr::fig_chunk("code-second", "png")
)
```
:::

::::

::::{.columns}

::: {.column width=60%}
Changer la couleur et ajouter un titre et une légende pour les axes (très importants pour comprendre un graphique)

```{r code-trois, fig.show="hide", warning=FALSE}
ggplot(hv3, aes(x=age)) +
  geom_histogram(bins=30, fill="skyblue") +
  labs(title = "Répartition des âges des enquêtés") +
  xlab("Âge") +
  ylab("Effectif")

```
:::

::: {.column width=40%}
```{r, echo=FALSE}
knitr::include_graphics(
  knitr::fig_chunk("code-trois", "png")
)
```
:::

::::

## Boîte à moustache

Une autre représentation classique est la "Boîte à moustache", que l'on obtient avec la commande `geom_boxplot()` : 

:::: {.columns}

::: {.column width=60%}
```{r box1, fig.show="hide", warning=FALSE}
ggplot(hv3, aes(y=age)) +
  geom_boxplot()  
```
:::

::: {.column width=40%}
```{r, echo=FALSE}
knitr::include_graphics(
  knitr::fig_chunk("box1", "png")
)
```
:::

::::

:::: {.columns}
::: {.column width=60%}
```{r box2, fig.show="hide", warning=FALSE}
ggplot(hv3, aes(x=sport, y=age)) +
  geom_boxplot(fill = c("gold", "darkgreen")) +
  xlab("Pratique d'un sport") +
  ylab("Âge")
```
:::

::: {.column width=40%}
```{r, echo=FALSE}
knitr::include_graphics(
  knitr::fig_chunk("box2", "png")
)
```
:::

::::

::: {.notes}
Bien faire remarquer aux étudiants les différents arguments dans ces fonctions.
:::