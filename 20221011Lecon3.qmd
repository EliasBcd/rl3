---
title: "Analyse de données et rapports scientifiques"
subtitle: "L3 économie-finance"
author: "Elias Bouacida"
format: revealjs
lang: fr
institute: "Université Paris 8"
scrollable: true
date: today
self-contained: true
---

```{r setup, include=F}
knitr::opts_chunk$set(echo = TRUE)
```

# Paquets

## Installer des extensions (paquets)

- En plus de l'installation de base : extensions, appelées paquet (*package* en anglais) ou librairie
- En majorité : développées et maintenues par la communauté des utilisateurs et utilisatrices de R
- Diffusées via un réseau de serveurs nommé CRAN (Comprehensive R Archive Network).
- Pour installer une extension, si on dispose d'une connexion Internet, on peut 
    - Cliquer sur le bouton Install Packages de l'onglet Tools de RStudio.
    Il suffit alors d'indiquer le nom de l'extension dans le champ Package et de cliquer sur Install.
    - Utiliser la fonction `install.packages()` directement dans la console.
    Par exemple, pour installer le paquet `ggplot2` on peut exécuter la commande    

```{r eval=FALSE}
install.packages(ggplot2)
```


## Charger des extensions

- Une fois installée, il faut la “charger” avant de pouvoir utiliser les fonctions qu'elle propose.
Ceci se fait avec la fonction `library()`. 
Pour pouvoir utiliser les fonctions de `ggplot2`, vous devrez exécuter la commande suivante :

```{r eval=FALSE}
library(ggplot2)
```

- Vous avez déjà rencontré ces commandes quand nous avons installé et commencé à utiliser `swirl`.

. . .

On regroupe en général en début de script toute une série de commandes `library()` qui permettent de charger tous les paquets utilisés dans le script.
Quelque chose comme :

```{r}
library(ggplot2)
library(haven)
library(tidyr)
```


# Créer des documents avec du code : R Markdown

## Introduction

- Un atout important de R et Rstudio est RMarkdown.
- Format qui combine code et explications
- Aide disponible [ici](https://raw.githubusercontent.com/rstudio/cheatsheets/main/rmarkdown.pdf)
- Nécessite l'utilisation de Rstudio pour fonctionner correctement

## Structure d'un document

Un document Rmarkdown est un fichier texte avec une extension `.Rmd` qui ressemble à ceci :

![](markdown.png)

## Principaux éléments

1. L'en tête YAML, comprise entre les ---
2. Des morceaux de code R, qui commencent par ```
3. Du texte normal en Rmarkdown (avec donc quelques balises de formatages)

## Actions possibles

1. Lancer le code seul en cliquant sur la petite icône *run* en haut à droite de la fenêtre.
2. Compiler tout le document en cliquant sur *knit* en haut. 
3. Utiliser le raccourci Cmd/Ctrl + Shift + K pour faire compiler tout le document.

Le document produit est par défaut en .html est apparaîtra à droite dans Rstudio.

::: {.notes}
Sortir ici un document .Rmd pour montrer aux étudiants les 3 possibilités
:::



## L'en-tête YAML

``` markdown
---
title: "Diamond sizes"
date: 2016-08-25
output: html_document
---
```

Contient les options du documents, spécifie titre, auteur, date, format de sortie, etc.

## Formatage du texte

Le texte écrit dans les `.Rmd` est écrit en markdown.
C'est un ensemble de règles de formatage pour des fichier texte qui est simple à lire et à écrire.

Pandoc Markdown

``` markdown
Text formatting 
------------------------------------------------------------

*italique*  ou _italique_
**gras**   __gras__
`code`
exposant^2^ et indice~2~

Titres
------------------------------------------------------------

# Titre de 1er niveau

## De 2eme niveau

### 3eme niveau

Listes
------------------------------------------------------------

*   Liste avec des points item 1

*   Item 2

    * Item 2a

    * Item 2b

1.  Liste énuméré item 1

1.  Item 2. Les nombres sont automatiquement incrementé à la compilation

Liens et images
------------------------------------------------------------

<http://example.com>

[Phrase avec un lien](http://example.com)

![Légende d'une image (optionnelle)](chemin/de/image.png)

Tableaux 
------------------------------------------------------------

Titre 1  | Titre 2
-------- | ----------
Contenu  | Contenu
Contenu  | Contenu

```

## Morceaux de code

3 façons d'insérer un morceaux de code dans un document `.Rmd` :

1. Avec le raccourci clavier  Cmd/Ctrl + Alt + I
2. Dans l'onglet "Code", "Insert Chunk"
3. En tapant manuellement les délimiteurs ````{r}` et  ```


Le titre d'un morceau de code consiste en ````{r` suivi d'un nom (optionnel), suivi d'options séparés par des virgules, suivi d'un `}`.

Je vous recommande de donner un nom à chaque morceau de code (ce nom doit être unique).

## Options du morceau de code {.smaller}

|Option | 	Lancer le code |	Montrer le code |	Sortie |	Graphique |	Messages |	Warnings |
|-----|:------:|:--------:|:-----:|:-----:|:------:|:-----:|
|eval = FALSE     | - |	  | - | - | - |	- |
|include = FALSE  |	  | - | - | - | - |	- |
|echo = FALSE 		|   | - |   |   |   | 	|			
|results = "hide" |   |   | - |   |   |   |			
|fig.show = "hide"| 	|   |   | - |   |   | 		
|message = FALSE  |		|		|   |   |	- |   |	
|warning = FALSE  |		|		|		|   |   | - |

: Que supprime chaque option ?

# Représentations graphiques

## ggplot2

La librairie (paquet) `R` la plus utilisée pour faire des représentations graphiques est [ggplot2](https://ggplot2.tidyverse.org/).
C'est une librairie issue du `tidyverse`, un ensemble de librairies `R` destinées au traitement de données.


## Un histogramme

La représentation graphique la plus courante pour présenter la distribution d'une variable quantitative continue est l'histogramme.
Un graphique `ggplot2` commence par la fonction `ggplot()`.
Le premier argument doit être l'ensemble de données utilisée (en général un `data.frame` ou une autre forme de tableau). 
Le second argument est `aes()` et contient en général la variable que vous voulez mettre en abscisse, précédent du mot-clé `x`.
On donne ensuite à `ggplot()` le type de graphique que l'on souhaite utiliser à l'aide du mot-clé `geom_xxxx` (où xxxx sera `points`)


# Premier travail avec les données

## Données d'exemple

Nous utiliserons dans ce cours des données issues de l'INSEE : la base "[Histoires de vie 2003](https://www.insee.fr/fr/statistiques/2532244)"

La base est disponible au format `.csv` à l'adresse suivante [https://raw.githubusercontent.com/EliasBcd/rl3/main/bases/hdv3.csv](https://raw.githubusercontent.com/EliasBcd/rl3/main/bases/hdv3.csv)

Vous pouvez la charger directement dans `R` à l'aide de la commande `read.csv()`. On va la placer dans un objet nommé `hv3` : 

```{r}
hv3 <- read.csv("https://raw.githubusercontent.com/EliasBcd/rl3/main/bases/hdv3.csv")
```

Alternativement, vous pouvez enregistrer le fichier sur votre disque dur, puis le charger dans `R` avec :

```{r eval=FALSE}
hv3 <- read.csv("chemin_vers_le_fichier/hdv3.csv")
```

Vous pouvez voir dans l'onglet "Environment" que la base de donnée comprend 2000 observations, et 21 variables.

Si vous souhaitez voir le contenu de la base, vous pouvez utiliser la commande `View()` : 
```{r eval=FALSE}
View(hv3)
```

## Un histogramme

(ici un histogramme en utilisant `geom_histogram()`, après un `+`) :

:::: {.columns}

::: {.column width=60%}
```{r code-first, fig.show="hide", warning=FALSE}
library(ggplot2)

ggplot(hv3, aes(x=age)) +
  geom_histogram()
```
:::

::: {.column width=40%}
```{r, echo=FALSE}
knitr::include_graphics(
  knitr::fig_chunk("code-first", "png")
)
```
:::

::::


---

:::: {.columns}

::: {.column width=60%}
On peut faire varier le nombre de catégories.

```{r code-second, fig.show="hide", warning=FALSE}
ggplot(hv3, aes(x=age)) +
  geom_histogram(bins=10)
```
:::

::: {.column width=40%}
```{r, echo=FALSE}
knitr::include_graphics(
  knitr::fig_chunk("code-second", "png")
)
```
:::

::::

::::{.columns}

::: {.column width=60%}
Changer la couleur et ajouter un titre et une légende pour les axes (très importants pour comprendre un graphique)

```{r code-trois, fig.show="hide", warning=FALSE}
ggplot(hv3, aes(x=age)) +
  geom_histogram(bins=30, fill="skyblue") +
  labs(title = "Répartition des âges des enquêtés") +
  xlab("Âge") +
  ylab("Effectif")

```
:::

::: {.column width=40%}
```{r, echo=FALSE}
knitr::include_graphics(
  knitr::fig_chunk("code-trois", "png")
)
```
:::

::::

## Boîte à moustache

Une autre représentation classique est la "Boîte à moustache", que l'on obtient avec la commande `geom_boxplot()` : 

:::: {.columns}

::: {.column width=60%}
```{r box1, fig.show="hide", warning=FALSE}
ggplot(hv3, aes(y=age)) +
  geom_boxplot()  
```
:::

::: {.column width=40%}
```{r, echo=FALSE}
knitr::include_graphics(
  knitr::fig_chunk("box1", "png")
)
```
:::

::::

:::: {.columns}
::: {.column width=60%}
```{r box2, fig.show="hide", warning=FALSE}
ggplot(hv3, aes(x=sport, y=age)) +
  geom_boxplot(fill = c("gold", "darkgreen")) +
  xlab("Pratique d'un sport") +
  ylab("Âge")
```
:::

::: {.column width=40%}
```{r, echo=FALSE}
knitr::include_graphics(
  knitr::fig_chunk("box2", "png")
)
```
:::

::::

::: {.notes}
Bien faire remarquer aux étudiants les différents arguments dans ces fonctions.
:::


