---
title: "S√©ance 7 : Automatisation et rapports"
subtitle: "Apprendre R avec les LLMs"
author: "Elias Bouacida"
date: last-modified
date-format: long
format:
  html: default
  revealjs:
    scrollable: true
    slide-number: true
    output-file: slide-lecon7.html
    embed-resources: true
    footer: "S√©ance 7 - Automatisation et rapports"
format-links: [revealjs]
lang: fr
execute:
  echo: true
---

## Plan de la s√©ance {.smaller}

::: {.incremental}
- **R√©cap et partage** (15min) : Retours sur l'organisation du code
- **Traitement par lots** (60min) : Analyser plusieurs fichiers automatiquement
- **Introduction √† R Markdown** (60min) : M√©langer code, texte et r√©sultats
- **Rapport param√©tr√©** (65min) : Cr√©er un template d'analyse r√©utilisable
:::

::: {.fragment}
**Production attendue :** Rapport automatis√© fonctionnel au format PDF/HTML
:::

## Objectifs de la s√©ance

::: {.callout-tip}
## Automatiser pour gagner du temps
:::

::: {.incremental}
- **Automatiser** le traitement de plusieurs fichiers
- **Cr√©er** des rapports reproductibles
- **Ma√Ætriser** R Markdown pour m√©langer code et texte
- **Param√©trer** ses analyses pour la r√©utilisation
- **G√©n√©rer** des documents professionnels
:::

# R√©cap et partage {background-color="#2E8B57"}

## Retours sur l'organisation

::: {.incremental}
- Comment avez-vous organis√© votre code ?
- Quelles difficult√©s avec les packages ?
- Une fonction utile que vous avez cr√©√©e ?
:::

## Le d√©fi de l'√©chelle

**Situation r√©elle :**

::: {.fragment}
Vous avez analys√© les ventes de janvier...
:::

::: {.fragment}
Maintenant on vous demande d'analyser janvier, f√©vrier, mars, avril, mai, juin... üìä
:::

::: {.fragment}
::: {.callout-warning}
## Probl√®me
Copier-coller votre code 12 fois ? Non ! Il faut **automatiser**.
:::
:::

# Traitement par lots {background-color="#4169E1"}

## Principe de l'automatisation

**Au lieu de :**

```{r}
#| eval: false
ventes_jan <- read.csv("ventes_janvier.csv")
analyse_jan <- analyser(ventes_jan)

ventes_fev <- read.csv("ventes_fevrier.csv")
analyse_fev <- analyser(ventes_fev)

# ... r√©p√©ter 10 fois ...
```

**On fait :**

```{r}
#| eval: false
fichiers <- list.files(pattern = ".csv")

for (fichier in fichiers) {
  donnees <- read.csv(fichier)
  analyse <- analyser(donnees)
  sauvegarder_resultat(analyse, fichier)
}
```

## Exercice 1 : Lister des fichiers {.smaller}

**Demandez au LLM :**

> "Comment lister tous les fichiers CSV d'un dossier en R ?"

::: {.fragment}
Vous d√©couvrirez :

```{r}
#| eval: false
# Lister tous les fichiers CSV du dossier courant
fichiers <- list.files(pattern = "\\.csv$")

# Lister avec le chemin complet
fichiers <- list.files(path = "donnees/", pattern = "\\.csv$",
                       full.names = TRUE)

# Voir les fichiers
print(fichiers)
```
:::

::: {.fragment}
**Testez avec vos propres fichiers !**
:::

::: {.notes}
15 minutes. Premi√®re √©tape de l'automatisation.
:::

## Exercice 2 : Boucle sur des fichiers {.smaller}

**Cr√©ez un script qui traite plusieurs fichiers :**

```{r}
#| eval: false
# Lister les fichiers
fichiers <- list.files(path = "donnees/", pattern = "\\.csv$",
                       full.names = TRUE)

# Cr√©er une liste pour stocker les r√©sultats
resultats <- list()

# Boucle sur chaque fichier
for (fichier in fichiers) {
  # Lire le fichier
  donnees <- read.csv(fichier)

  # Calculer des statistiques
  stats <- data.frame(
    fichier = basename(fichier),
    n_lignes = nrow(donnees),
    moyenne = mean(donnees$valeur, na.rm = TRUE)
  )

  # Stocker le r√©sultat
  resultats[[fichier]] <- stats
}

# Combiner tous les r√©sultats
resultats_final <- do.call(rbind, resultats)
```

::: {.notes}
20 minutes. Pattern essentiel pour l'automatisation.
:::

## Exercice 3 : Fonction d'analyse par lots {.smaller}

**Cr√©ez une fonction r√©utilisable :**

```{r}
#| eval: false
analyser_dossier <- function(chemin, pattern = "\\.csv$") {
  # Lister les fichiers
  fichiers <- list.files(path = chemin, pattern = pattern,
                         full.names = TRUE)

  if (length(fichiers) == 0) {
    stop("Aucun fichier trouv√© !")
  }

  # Analyser chaque fichier
  resultats <- lapply(fichiers, function(f) {
    donnees <- read.csv(f)
    data.frame(
      fichier = basename(f),
      n_lignes = nrow(donnees),
      n_colonnes = ncol(donnees),
      moyenne_valeur = mean(donnees$valeur, na.rm = TRUE)
    )
  })

  # Combiner et retourner
  do.call(rbind, resultats)
}

# Utilisation
resultats <- analyser_dossier("donnees/ventes/")
```

::: {.notes}
25 minutes. Fonction professionnelle d'automatisation.
:::

## Gestion des erreurs dans les boucles

**Probl√®me :** Un fichier corrompu plante tout !

```{r}
#| eval: false
# Mauvais : tout plante au premier probl√®me
for (fichier in fichiers) {
  donnees <- read.csv(fichier)  # Erreur ici = tout s'arr√™te
  analyser(donnees)
}

# Bon : g√©rer les erreurs
for (fichier in fichiers) {
  resultat <- tryCatch({
    donnees <- read.csv(fichier)
    analyser(donnees)
  }, error = function(e) {
    message("Erreur avec ", fichier, ": ", e$message)
    NULL  # Retourner NULL en cas d'erreur
  })
}
```

::: {.fragment}
**Demandez au LLM d'expliquer `tryCatch()` !**
:::

# Introduction √† R Markdown {background-color="#FF8C00"}

## Qu'est-ce que R Markdown ?

**R Markdown** permet de cr√©er des documents qui m√©langent :

::: {.incremental}
- Du **texte** (explications, interpr√©tations)
- Du **code R** (analyses)
- Des **r√©sultats** (tableaux, graphiques)
- Des **formules** math√©matiques
:::

::: {.fragment}
**Formats de sortie :**

- PDF, HTML, Word
- Pr√©sentations (comme ce cours !)
- Sites web, livres
:::

## Pourquoi R Markdown ?

::: {.incremental}
**Avantages :**

- **Reproductibilit√©** : tout est dans un seul fichier
- **Coh√©rence** : r√©sultats toujours √† jour avec le code
- **Communication** : rapports professionnels
- **Gain de temps** : pas de copier-coller de r√©sultats
:::

::: {.fragment}
::: {.callout-note}
## Important
Si vos donn√©es changent, votre rapport se met √† jour automatiquement !
:::
:::

## Structure d'un document R Markdown {.smaller}

**Un fichier `.Rmd` contient :**

````markdown
---
title: "Mon Rapport"
author: "Votre Nom"
date: "2025-01-15"
output: html_document
---

# Introduction

Ceci est du texte normal.

```{{r}}
# Ceci est du code R
donnees <- read.csv("data.csv")
mean(donnees$valeur)
```

## R√©sultats

Le graphique ci-dessous montre...

```{{r}}
plot(donnees$x, donnees$y)
```
````

## Exercice 4 : Premier document R Markdown {.smaller}

**Cr√©ez un nouveau fichier R Markdown :**

1. Dans RStudio : File > New File > R Markdown
2. Donnez un titre et choisissez HTML
3. Cliquez sur "Knit" pour g√©n√©rer le document

::: {.fragment}
**Observez :**

- L'en-t√™te YAML (entre les `---`)
- Les blocs de code R (entre les ` ```{r} ` )
- Le texte Markdown
- Le r√©sultat g√©n√©r√©
:::

::: {.fragment}
**Demandez au LLM :**

> "Explique-moi la syntaxe de base de Markdown (titres, listes, gras, italique)"
:::

::: {.notes}
20 minutes. Premi√®re d√©couverte de R Markdown.
:::

## Options des blocs de code {.smaller}

**On peut contr√¥ler ce qui appara√Æt dans le rapport :**

````markdown
```{{r, echo=TRUE, eval=TRUE}}
# echo=TRUE : montrer le code
# eval=TRUE : ex√©cuter le code
x <- 1:10
mean(x)
```

```{{r, echo=FALSE, eval=TRUE}}
# echo=FALSE : cacher le code, montrer seulement le r√©sultat
plot(x, x^2)
```

```{{r, eval=FALSE}}
# eval=FALSE : montrer le code mais ne pas l'ex√©cuter
# Utile pour montrer des exemples
install.packages("monpackage")
```
````

::: {.fragment}
**Autres options utiles :**

- `message=FALSE` : cacher les messages
- `warning=FALSE` : cacher les avertissements
- `fig.width=8, fig.height=5` : taille des graphiques
:::

## Exercice 5 : Rapport d'analyse simple {.smaller}

**Cr√©ez un rapport R Markdown qui :**

1. Importe un jeu de donn√©es
2. Affiche les premi√®res lignes (avec `head()`)
3. Calcule des statistiques (moyenne, m√©diane, etc.)
4. Cr√©e 2 graphiques
5. Interpr√®te les r√©sultats en texte

**Structure sugg√©r√©e :**

````markdown
# Introduction
Description du dataset...

# Exploration des donn√©es
```{{r}}
donnees <- read.csv("data.csv")
head(donnees)
summary(donnees)
```

# Analyse
```{{r, echo=FALSE}}
# Graphiques sans montrer le code
```

# Conclusion
Les r√©sultats montrent que...
````

::: {.notes}
30 minutes. Premier rapport complet.
:::

## Markdown pour le formatage {.smaller}

**Syntaxe de base :**

```markdown
# Titre niveau 1
## Titre niveau 2
### Titre niveau 3

**Texte en gras**
*Texte en italique*

- Liste √† puces
- Deuxi√®me √©l√©ment

1. Liste num√©rot√©e
2. Deuxi√®me √©l√©ment

[Lien](https://www.example.com)

![Image](chemin/vers/image.png)
```

::: {.fragment}
**Demandez au LLM de vous montrer plus d'options de formatage !**
:::

# Rapport param√©tr√© {background-color="#8B008B"}

## Pourquoi param√©trer ?

**Probl√®me :** Vous voulez le m√™me rapport pour diff√©rents datasets

**Solution :** Cr√©er un template param√©trable

```markdown
---
title: "Rapport de ventes"
params:
  fichier: "ventes_janvier.csv"
  seuil: 1000
---

```{{r}}
donnees <- read.csv(params$fichier)
ventes_importantes <- donnees[donnees$montant > params$seuil, ]
```
```

## Exercice 6 : Premier rapport param√©tr√© {.smaller}

**Cr√©ez un rapport avec param√®tres :**

````{verbatim}
---
title: "Analyse automatis√©e"
params:
  dataset: "data.csv"
  variable: "valeur"
  titre_graphique: "Distribution des valeurs"
output: html_document
---

# Analyse de `r params$variable`

```{r}
donnees <- read.csv(params$dataset)
variable_data <- donnees[[params$variable]]

# Statistiques
cat("Moyenne:", mean(variable_data, na.rm = TRUE), "\n")
cat("M√©diane:", median(variable_data, na.rm = TRUE), "\n")

# Graphique
hist(variable_data, main = params$titre_graphique)
```
````

::: {.notes}
25 minutes. Introduction aux param√®tres.
:::

## G√©n√©rer des rapports par programme {.smaller}

**Vous pouvez g√©n√©rer des rapports depuis R :**

```{r}
#| eval: false
library(rmarkdown)

# G√©n√©rer un rapport avec des param√®tres sp√©cifiques
render("template.Rmd",
       params = list(
         dataset = "ventes_janvier.csv",
         variable = "montant",
         titre_graphique = "Ventes de janvier"
       ),
       output_file = "rapport_janvier.html")

# Boucle pour g√©n√©rer plusieurs rapports
fichiers <- c("ventes_janvier.csv", "ventes_fevrier.csv", "ventes_mars.csv")

for (f in fichiers) {
  mois <- tools::file_path_sans_ext(basename(f))

  render("template.Rmd",
         params = list(
           dataset = f,
           variable = "montant",
           titre_graphique = paste("Ventes de", mois)
         ),
         output_file = paste0("rapport_", mois, ".html"))
}
```

::: {.notes}
20 minutes. Automatisation compl√®te.
:::

## Exercice 7 : Fonction de g√©n√©ration de rapport {.smaller}

**Cr√©ez une fonction qui g√©n√®re des rapports automatiquement :**

```{r}
#| eval: false
generer_rapport <- function(fichier_donnees, output_dir = "rapports/") {
  # Extraire le nom du fichier sans extension
  nom_base <- tools::file_path_sans_ext(basename(fichier_donnees))

  # Cr√©er le dossier de sortie si n√©cessaire
  if (!dir.exists(output_dir)) {
    dir.create(output_dir, recursive = TRUE)
  }

  # G√©n√©rer le rapport
  output_file <- file.path(output_dir, paste0("rapport_", nom_base, ".html"))

  rmarkdown::render(
    "template_analyse.Rmd",
    params = list(
      dataset = fichier_donnees,
      titre = paste("Analyse de", nom_base)
    ),
    output_file = output_file
  )

  message("Rapport g√©n√©r√© : ", output_file)
  return(output_file)
}

# Utilisation
fichiers <- list.files("donnees/", pattern = "\\.csv$", full.names = TRUE)
rapports <- lapply(fichiers, generer_rapport)
```

::: {.notes}
30 minutes. Fonction professionnelle de g√©n√©ration de rapports.
:::

## Formats de sortie multiples

**R Markdown peut g√©n√©rer diff√©rents formats :**

````markdown
---
title: "Mon Rapport"
output:
  html_document:
    toc: true
    toc_float: true
  pdf_document:
    toc: true
  word_document: default
---
````

::: {.fragment}
**Pour g√©n√©rer un format sp√©cifique :**

```{r}
#| eval: false
render("rapport.Rmd", output_format = "pdf_document")
```
:::

# Mini-projet : Syst√®me de rapports {background-color="#DC143C"}

## Projet final : Rapports automatis√©s {.smaller}

**Objectif :** Cr√©er un syst√®me complet de g√©n√©ration de rapports

**Sp√©cifications :**

1. Un **template R Markdown** param√©trable
2. Une **fonction** qui g√©n√®re des rapports pour plusieurs fichiers
3. Les rapports doivent inclure :
   - Import et nettoyage automatique
   - Statistiques descriptives
   - Au moins 3 graphiques
   - Interpr√©tation textuelle
4. Gestion des erreurs (fichiers manquants, colonnes manquantes)
5. G√©n√©ration en HTML

::: {.callout-note}
## Utilisez tout ce que vous avez appris
Fonctions, dplyr, ggplot2, gestion d'erreurs, R Markdown !
:::

::: {.notes}
65 minutes. Projet de synth√®se final.
:::

## Crit√®res du projet {.smaller}

::: {.incremental}
- ‚úÖ Template R Markdown **param√©trable** et r√©utilisable
- ‚úÖ Fonction de g√©n√©ration **robuste** (g√®re les erreurs)
- ‚úÖ Rapports **complets** (stats + graphiques + texte)
- ‚úÖ Code **comment√©** et **organis√©**
- ‚úÖ **Fonctionne** avec diff√©rents fichiers de donn√©es
:::

::: {.fragment}
**Bonus :**

- G√©n√©ration automatique d'un index de tous les rapports
- Graphiques interactifs avec `plotly`
- Rapport au format PDF
- Envoi automatique par email (avanc√© !)
:::

# Retour r√©flexif {background-color="#2F4F4F"}

## Exercice r√©flexif : Journal de bord {.smaller}

**Documentez :**

1. **Automatisation** :
   - Comment automatiser un traitement r√©p√©titif ?
   - Votre fonction d'analyse par lots
   - Une erreur que vous avez g√©r√©e avec `tryCatch()`

2. **R Markdown** :
   - Diff√©rences avec un script R normal
   - Avantages pour vos analyses
   - Options de blocs de code les plus utiles

3. **Rapports param√©tr√©s** :
   - Votre template r√©utilisable
   - Comment vous allez l'utiliser √† l'avenir
   - Difficult√©s rencontr√©es et solutions

::: {.notes}
15 minutes. Documentation des apprentissages avanc√©s.
:::

## Ce que vous avez accompli

::: {.incremental}
‚úÖ Automatiser le traitement de plusieurs fichiers
‚úÖ Cr√©er des rapports reproductibles avec R Markdown
‚úÖ Param√©trer des analyses pour la r√©utilisation
‚úÖ G√©n√©rer des documents professionnels automatiquement
‚úÖ G√©rer les erreurs dans les processus automatis√©s
‚úÖ Combiner toutes vos comp√©tences en R
:::

# Ressources et prochaines √©tapes {background-color="#2E8B57"}

## Concepts cl√©s de la s√©ance

**Automatisation :**

- `list.files()` : lister des fichiers
- Boucles `for` et `lapply()` sur plusieurs fichiers
- `tryCatch()` : gestion des erreurs

**R Markdown :**

- Structure : YAML + Markdown + code R
- Options de blocs : `echo`, `eval`, `message`, `warning`
- `render()` : g√©n√©rer des rapports par programme

**Param√®tres :**

- `params` dans le YAML
- Acc√®s avec `params$nom_parametre`

## Pour aller plus loin

::: {.incremental}
- **Explorez** d'autres formats de sortie (PDF, Word, slides)
- **Cr√©ez** une biblioth√®que de templates pour diff√©rents types d'analyses
- **Automatisez** la g√©n√©ration r√©guli√®re de rapports (t√¢ches planifi√©es)
- **Partagez** vos templates avec vos coll√®gues
:::

## Pr√©paration s√©ance finale

::: {.callout-note}
## Devoirs

1. Finalisez votre syst√®me de rapports automatis√©s
2. Testez-le avec au moins 3 fichiers diff√©rents
3. **Mettez √† jour votre journal** en d√©tail
4. Pr√©parez-vous pour le projet collaboratif final
5. R√©fl√©chissez aux bonnes pratiques pour travailler en √©quipe sur du code
:::

::: {.fragment}
**S√©ance finale :** Projet collaboratif - int√©grer vos comp√©tences en √©quipe !
:::

## Questions ?

::: {.callout-tip}
## Points cl√©s √† retenir

- **Automatiser** √©vite la r√©p√©tition et les erreurs
- **R Markdown** garantit la reproductibilit√©
- Les **param√®tres** rendent vos analyses r√©utilisables
- La **gestion d'erreurs** est essentielle en production
- Vous √™tes maintenant capables de cr√©er des **syst√®mes professionnels** !
:::

::: {.fragment}
**Bravo pour ces comp√©tences avanc√©es ! üéì**
:::