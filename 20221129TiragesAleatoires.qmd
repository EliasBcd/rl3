---
title: "Tirages aléatoires"
subtitle: "L3 économie-finance"
author: "Elias Bouacida"
institute: "Université Paris 8"
date: "29 novembre 2022"
format: 
  revealjs:
    embed-resources: true
    scrollable: true
lang: fr
execute: 
  echo: true
---

```{r}
#| echo: false

library(ggplot2)
library(latex2exp)
```

# Introduction

## Les tirages aléatoires

`R` a de nombreuses fonctions qui permettent de faire des tirages aléatoires.
Il connaît aussi beaucoup de distributions de probabilités "classiques" et il est donc possible d’échantillonner à partir de celle-ci.

# Échantillonner

## `sample()` {.smaller}

La fonction `sample()` permet d'échantillonner à partir d'un vecteur connu :

```{r}
# Parmi les entiers compris entre 1 et 10, tirer aléatoirement 5 nombres
sample(x = 1:10, size  = 5)
```

| Argument | Définition|
|:---------|:---------------------------------------------|
|  `x`     | Le vecteur que l'on souhaite échantillonner. Par exemple, pour simuler des tirages à pile ou face : `x = c("P", "F")` |
|   `size` | La taille de l'échantillon. La valeur par défaut est la longueur de `x`.|
| `replace`| Est-ce que le tirage se fait avec remise ? Si `FALSE`, alors une valeur ne peut être tirée qu'une seule fois. Si `TRUE`, chaque valeur peut être tirée plusieurs fois.|
|    `prob`| Un vecteur de probabilités de la même longueur que `x` qui indique la probabilité de chaque valeur dans `x`. Si l'argument n'est pas spécifié, chaque valeur à la même probabilité. Si la somme n'est pas 1, R va normalisé le vecteur pour que la somme soit 1.|

## Exemple : simulation de pile ou face

Avec une pièce non-biaisée

```{r}
sample(x = c("F", "P"), # les valeurs possibles de la pièce
       size = 10,  # 10 tirages
       replace = TRUE) # Échantillonnage avec remise
```

Notre pièce peut retomber sur la tranche, mais avec une faible probabilité

```{r}
sample(x = c("F", "P", "T"),
       prob = c(.48, .48, 0.04), # Pièce avec des tranches épaisses
       size = 50,
       replace = TRUE)

```

## Reproducibilité

Le résultat d'un tirage aléatoire est toujours différent !
En reprenant le tirage précédent :

```{r}
sample(x = c("F", "P"), # les valeurs possibles de la pièce
       size = 10,  # 10 tirages
       replace = TRUE) # Échantillonnage avec remise

sample(x = c("F", "P"), # les valeurs possibles de la pièce
       size = 10,  # 10 tirages
       replace = TRUE) # Échantillonnage avec remise
```

## Contrôler le tirage

Il y a des situations où vous souhaitez exercer un contrôle sur la procédure de tirage.
Par exemple pour pouvoir reproduire exactement le même code.
On utilise alors la fonction `set.seed()` et on lui donne un nombre.

```{r}
set.seed(0)
sample(x = c("F", "P"), # les valeurs possibles de la pièce
       size = 10,  # 10 tirages
       replace = TRUE) # Échantillonnage avec remise

set.seed(0)
sample(x = c("F", "P"), # les valeurs possibles de la pièce
       size = 10,  # 10 tirages
       replace = TRUE) # Échantillonnage avec remise
```

Les deux tirages sont exactement identiques !

# Utilisation des distributions

`R` connaît toutes les distributions de probabilités classiques, telle que la loi normale ou la loi uniforme.

## Loi normale

On utilise `rnorm()` pour tirer depuis une loi normale.

```{r normaldist}
#| fig-cap: Trois lois normales différentes
#| echo: false

df <- data.frame(
  g = c(rnorm(1000), rnorm(1000, mean = -2, sd = 5), rnorm(1000, mean = 1, sd = 2)),
  distribution = c(rep("1", 1000), rep("2", 1000), rep("3", 1000))
)

p <- ggplot(df) +
  geom_density(aes(x = g, colour = distribution), linewidth = 2) +
  xlab('x') +
  ylab('Densité') +
  scale_colour_discrete("Caractéristiques", labels = c(TeX("$\\mu=0, \\sigma=1$"),TeX("$\\mu=-2, \\sigma=5$"),TeX("$\\mu=1, \\sigma=2$")))

p
```

## Utilisation


```{r}
# 5 tirages depuis une loi Gaussienne
rnorm(n = 5, mean = 0, sd = 1)
# 3 tirage d'une loi normale de moyenne -10 et d'écart-type 15
rnorm(n = 3, mean = -10, sd = 15)
```

| Argument| Définition|
|:---------|:---------------------------------------------|
|     `n`|     Le nombre de tirage à faire depuis la distribution|
|     `mean`|      La moyenne de la distribution.|
|     `sd`|     L'écart type de la distribution.|


## Loi uniforme

```{r uniformdist}
#| fig-cap: Trois lois uniformes différentes
#| echo: false

df <- data.frame(
  g = c(runif(10000, min = -1, max = 1), runif(10000, min = -4, max = -3), runif(10000, min = -2, max = 4)),
  distribution = c(rep("1", 10000), rep("2", 10000), rep("3", 10000))
)

p <- ggplot(df) +
  geom_freqpoly(aes(x = g, colour = distribution), linewidth = 2) +
  ylab('Densité') +
  scale_colour_discrete("Caractéristiques", labels = c(TeX("$\\min=-1, \\max=1$"),TeX("$\\min=-4, \\max=-3$"),TeX("$\\min=-2, \\max=4$"))) +
  scale_x_continuous('x', breaks = -4:4)

p
```

## Utilisation

La loi uniforme utilise la même probabilité pour toutes les valeurs dans un intervalle.

```{r}
# 5 tirages uniformes entre 0 et 1
runif(n = 5, min = 0, max = 1)
# 10 tirages uniformes entre -100 et 100
runif(n = 10, min = -100, max = 100)
```

| Argument | Définition|
|:---------|:---------------------------------------------|
|     `n`|     Le nombre de tirages|
|     `min`|  Le minimum de la distribution uniforme|
|     `max`|  Le maximum de la distribution uniforme|
