
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R est un logiciel libre livré sans AUCUNE GARANTIE.
Vous pouvez le redistribuer sous certaines conditions.
Tapez 'license()' ou 'licence()' pour plus de détails.

R est un projet collaboratif avec de nombreux contributeurs.
Tapez 'contributors()' pour plus d'information et
'citation()' pour la façon de le citer dans les publications.

Tapez 'demo()' pour des démonstrations, 'help()' pour l'aide
en ligne ou 'help.start()' pour obtenir l'aide au format HTML.
Tapez 'q()' pour quitter R.

[R.app GUI 1.79 (8095) x86_64-apple-darwin17.0]

[Espace de Travail restauré depuis /Users/yasmine/.RData]
> 
> 
> install.packages('swirl')
--- SVP sélectionnez un miroir CRAN pour cette session ---
essai de l'URL 'https://cran.irsn.fr/bin/macosx/contrib/4.2/swirl_2.4.5.tgz'
Content type 'application/x-gzip' length 348108 bytes (339 KB)
==================================================
downloaded 339 KB


Les packages binaires téléchargés sont dans
	/var/folders/fl/y3sd58wj0rg26t0dnpjdtdpw0000gp/T//Rtmp8jdQN6/downloaded_packages
> 
> 
> library(swirl)

| Hi! I see that you have some variables saved in your workspace. To keep
| things running smoothly, I recommend you clean up before starting swirl.

| Type ls() to see a list of the variables in your workspace. Then, type
| rm(list=ls()) to clear your workspace.

| Type swirl() when you are ready to begin.

> install_course_github("EliasBcd","InitiationR")
Downloading: 76 kB      
> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same name as you did then. If you are new,
| call yourself something unique.

What shall I call you? Yasmine

| Thanks, Yasmine. Let's cover a couple of quick housekeeping items before we begin our first lesson. First of all,
| you should know that when you see '...', that means you should press Enter when you are done reading and ready to
| continue.

...  <-- That's your cue to press Enter to continue

| Also, when you see 'ANSWER:', the R prompt (>), or when you are asked to select from a list, that means it's your
| turn to enter a response, then press Enter to continue.

Select 1, 2, or 3 and press Enter 

1: Continue.
2: Proceed.
3: Let's get going!

Sélection : 1

| You can exit swirl and return to the R prompt (>) at any time by pressing the Esc key. If you are already at the prompt,
| type bye() to exit and save your progress. When you exit properly, you'll see a short message letting you know you've done
| so.

| When you are at the R prompt (>):
| -- Typing skip() allows you to skip the current question.
| -- Typing play() lets you experiment with R on your own; swirl will ignore what you do...
| -- UNTIL you type nxt() which will regain swirl's attention.
| -- Typing bye() causes swirl to exit. Your progress will be saved.
| -- Typing main() returns you to swirl's main menu.
| -- Typing info() displays these options again.

| Let's get started!

...

| Please choose a course, or type 0 to exit swirl.

1: InitiationR
2: Take me to the swirl course repository!

Sélection : 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Manipulations simples           2: Assignations et objets          3: Types                        
 4: Vecteurs                        5: Fichiers et espace de travail   6: Logique                      
 7: Valeurs manquantes              8: Vecteurs numériques             9: Dataframes                   
10: Scripts et fonctions           11: Control Flow                   

Sélection : 6

| Attempting to load lesson dependencies...

| Package ‘base64enc’ loaded correctly!
  |                                                                                                                   |   0%

| Cette leçon introduit les opérateurs et opérations logiques dans R.

...
  |====                                                                                                               |   3%
| Comme nous l'avons déjà vu, il y a deux valeurs logiques dans R, aussi appelé valeurs booléennes, TRUE et FALSE. Dans R,
| il est possible de créer des expressions logiques dont le résultat sera TRUE ou FALSE.

...
  |=======                                                                                                            |   6%
| La création d'expressions logiques nécessite des opérateurs logiques. Nous avons déjà vu les opérateurs arithmétiques tel
| que `+`, `-`, `*` et `/`. Le premier opérateur logique à connaître est l'égalité, représenté par deux signes égalités
| `==`. Essayez d'utiliser cet opérateur pour trouver si TRUE et TRUE sont égaux.

> 
> TRUE == TRUE 
[1] TRUE

| Your dedication is inspiring!
  |===========                                                                                                        |   9%
| Tout comme les expressions arithmétiques, les expressions logiques peuvent être regroupées à l'aide de parenthèses et
| indiquer ainsi les priorités de calcul. Par exemple, le résultat de l'expression (TRUE == TRUE) == TRUE sera bien TRUE.

...
  |==============                                                                                                     |  12%
| Testons cette propriété, essayez d'évaluer (FALSE == TRUE) == FALSE .

> (FALSE == TRUE) == FALSE
[1] TRUE

| All that hard work is paying off!
  |==================                                                                                                 |  16%
| L'opérateur d'égalité peut aussi servir à comparer des nombres. Utilisez-le pour savoir si 6 et 7 sont égaux.

> 6 == 7
[1] FALSE

| That's correct!
  |======================                                                                                             |  19%
| Le résultat de l'expression précédente est FALSE, parce 6 est plus petit que 7. Heureusement pour nous, nous pouvons aussi
| tester les inégalités pour savoir si un nombre est plus petit ou plus grand qu'un autre.

...
  |=========================                                                                                          |  22%
| L'opérateur plus petit que `<` teste si le nombre à gauche de l'opérateur est plus petit que le nombre à droite. Tapez une
| expression pour tester si 6 et plus petit que 7.

> 6 > 7
[1] FALSE

| Not quite! Try again. Or, type info() for more options.

| Utilisez l'opérateur 'plus petit que' et tapez 6 < 7.

> 6 < 7
[1] TRUE

| Great job!
  |=============================                                                                                      |  25%
| Il existe aussi un opérateur plus petit ou égal à `<=` qui teste si l'expression à gauche est plus petite ou égale à
| l'expression à droite. Essayez de voir si 10 est plus petit ou égal à 10.

> 10 <= 10
[1] TRUE

| You got it right!
  |================================                                                                                   |  28%
| On peut aussi utiliser les opérateurs plus grand que `>` et plus grand ou égal à `>=`.

...
  |====================================                                                                               |  31%
| Voyons si vous avez compris. Laquelle des expressions suivantes à pour résultat FALSE ?

1: 9 >= 10
2: 0 > -36
3: 7 == 7
4: 6 < 8

Sélection : 1

| That's the answer I was looking for.
  |========================================                                                                           |  34%
| Et maintenant, laquelle des expressions suivantes à pour résultat TRUE ?

1: -6 > -7
2: 7 == 9
3: 57 < 8
4: 9 >= 10

Sélection : 1

| You got it!
  |===========================================                                                                        |  38%
| Intéressons maintenant à l'opérateur 'différent de' (= non-égal) représenté par `!=`. Différent de teste si deux valeurs
| sont différentes, de telle sorte que le résultat de TRUE != FALSE est TRUE. Tout comme l'opérateur égalité, l'opérateur
| différent de s'utilise aussi avec des nombres. Essayez d'écrire une expression pour savoir si 5 est différent de 7.

> 5 != 7
[1] TRUE

| You are quite good my friend!
  |===============================================                                                                    |  41%
| Il peut être utile de 'négativer' une expression avec l'opérateur NON. Un point d'exclamation `!` inversera les
| évaluations de TRUE et FALSE, de telle sorte que la valeur de !TRUE (lire : non TRUE) est FALSE et que la valeur de !FALSE
| (lire : non FALSE) est TRUE. Essayez d'utiliser l'opéraeur NON pour trouver l'inverse de 5 est égal à 7.

> 5 = 7 !
Erreur : '!' inattendu(e) dans "5 = 7 !"
> 5 != 7
[1] TRUE

| Not quite, but you're learning! Try again. Or, type info() for more options.

| Cette question est peut-être un peu difficile, pensez à la négation de l'expression 5 == 7 (vous avez seulement besoin
| d'un point d'exclamation devant).

> 5 == 7 !
Erreur : '!' inattendu(e) dans "5 == 7 !"
> 
> 5 !== 7
Erreur : '=' inattendu(e) dans "5 !=="
> ! 5 == 7
[1] TRUE

| Keep up the great work!
  |==================================================                                                                 |  44%
| Récapitulons. L'opérateur égal `==` teste si deux valeurs sont égales. L'opérateur différent de `!=` teste si deux valeurs
| sont différentes. L'opérateur NON `!` négative une expression logique de telle manière que TRUE devient FALSE et FALSE
| devient TRUE.

...
  |======================================================                                                             |  47%
| Laquelle des expressions suivante est FALSE ?

1: !FALSE
2: 9 < 10
3: !(0 >= -1)
4: 7 != 8

Sélection : 3

| Great job!
  |==========================================================                                                         |  50%
| Quel est à votre avis le résultat de l'expression suivante : (TRUE != FALSE) == !(6 == 7)

1: TRUE
2: Y a-t-il une vérité objective dans la programmation ?
3: FALSE
4: %>%

Sélection : 4

| One more time. You can do it!

| Essayez d'évaluer les expressions indépendamment pour trouver le résultat.

1: %>%
2: TRUE
3: FALSE
4: Y a-t-il une vérité objective dans la programmation ?

Sélection : 2

| Keep up the great work!
  |=============================================================                                                      |  53%
| Il est parfois nécessaire d'examiner les relations entre plusieurs expressions logiques. On utilise pour cela les
| opérateurs ET (AND) et OU (OR).

...
  |=================================================================                                                  |  56%
| Regardons comment l'opérateur ET fonctionne. Il y a deux opérateurs ET dans R, `&` et `&&`. Les deux opérateurs sont
| similaires. Si les expressions à droite et à gauche de l'opérateur ET ont toutes les deux pour résultat TRUE, alors
| l'expression entière a pour résultat TRUE, sinon le résultat est FALSE. Par exemple, la valeur de TRUE & TRUE est TRUE.
| Essayez avec FALSE & FALSE.

> FALSE & FALSE
[1] FALSE

| Excellent job!
  |====================================================================                                               |  59%
| Vous pouvez utilisez l'opérateur `&` pour évaluer ET suivant un vecteur. La version `&&` a besoin d'avoir une seule valeur
| logique à gauche et à droite pour fonctionner. Essayons les deux. Commencez par TRUE & c(TRUE, FALSE, FALSE).

> TRUE & c(TRUE, FALSE, FALSE)
[1]  TRUE FALSE FALSE

| You are doing so well!
  |========================================================================                                           |  62%
| L'expression de gauche est recyclée (rappelez-vous la leçon sur les vecteurs) afin d'avoir la même longueur que le vecteur
| de droite. C'est comme si on avait écrit c(TRUE, TRUE, TRUE) & c(TRUE, FALSE, FALSE). Une expression comme cela
| fonctionnera différemment avec l'opérateur `&&`, R bloquant le recyclage du vecteur de gauche (et renvoit une alerte
| depuis la version 4.2.0).

...
  |===========================================================================                                        |  66%
| Utilisons la même opération en remplaçant `&` par `&&`.

> c(TRUE, TRUE, TRUE) && c(TRUE, FALSE, FALSE)
[1] TRUE
Messages d'avis :
1: Dans c(TRUE, TRUE, TRUE) && c(TRUE, FALSE, FALSE) :
  ‘length(x) = 3 > 1’ dans la conversion automatique vers ‘logical(1)’
2: Dans c(TRUE, TRUE, TRUE) && c(TRUE, FALSE, FALSE) :
  ‘length(x) = 3 > 1’ dans la conversion automatique vers ‘logical(1)’

| You almost had it, but not quite. Try again. Or, type info() for more options.

| Tapez TRUE && c(TRUE, FALSE, FALSE).

> TRUE && c(TRUE, FALSE, FALSE)
[1] TRUE
Message d'avis :
Dans TRUE && c(TRUE, FALSE, FALSE) :
  ‘length(x) = 3 > 1’ dans la conversion automatique vers ‘logical(1)’

| You got it!
  |===============================================================================                                    |  69%
| R nous renvoit un Warning et le résultat ! Un message commençant par Warning est une façon de communiquer pour R. R vous
| communique que l'opération que vous êtes en train de faire est possible (il vous donne un résultat), mais qu'elle lui
| semble suspecte. En fait, ici R utilise uniquement le premier élément du vecteur de droite. Ce comportement est amené à
| disparaître dans les futures versions de R, je ne vous encourage donc pas à l'utiliser. Le principal intérêt de
| l'opérateur `&&` est de vous garantir que le résultat a une longueur de 1. Cela nous servira dans la suite du cours.

...
  |===================================================================================                                |  72%
| L'opérateur OU fonctionne d'une manière similaire. `|` recycle les vecteurs si besoin, alors que `||` renvoit un résultat
| de longueur 1.

...
  |======================================================================================                             |  75%
| OU renvoit TRUE si l'expression de droite ou l'expression de gauche est TRUE. Il renvoit FALSE sinon.

...
  |==========================================================================================                         |  78%
| Testons la version vectorielle de OU. Tapez la commande TRUE | c(TRUE, FALSE, FALSE).

> TRUE | c(TRUE, FALSE, FALSE)
[1] TRUE TRUE TRUE

| You are doing so well!
  |=============================================================================================                      |  81%
| Les opérateurs logiques peuvent être chainés, tout comme les opérations arithmétiques. Les expressions `6 != 10 && FALSE
| && 1 >= 2` ou `TRUE || 5 < 9.3 || FALSE` sont tout à fait normales.

...
  |=================================================================================================                  |  84%
| Les opérations arithmétiques ont un ordre de priorité. Il en est de même pour les expressions logiques. Tous les
| opérateurs ET sont évalués avant les opérateurs OU. Essayez cet exemple un peu ambigu 5 > 8 || 6 != 8 && 4 > 3.9.

> 5 > 8 || 6 != 8 && 4 > 3.9
[1] TRUE

| Great job!
  |=====================================================================================================              |  88%
| Regardons l'ordre des opérations dans cet exemple. ET est prioritaire sur OU. On commence donc par évaluer les expressions
| à gauche et à droite de &&. 6 est bien différent de 8, donc le résultat à gauche est TRUE. 4 est bien plus grand que 3.9,
| donc le résultat à droite est aussi TRUE. Le résultat de TRUE && TRUE est TRUE. On peut maintenant regarder ce qui se
| passe autour de ||. À droite, on a TRUE, à gauche, 5 n'est pas plus grand que 8, donc le résultat est FALSE. FALSE || TRUE
| a pour résultat TRUE, ce qui nous donne bien le résultat final.

...
  |========================================================================================================           |  91%
| Quelle expression a pour résultat TRUE ?

1: 99.99 > 100 || 45 < 7.3 || 4 != 4.0
2: FALSE || TRUE && FALSE
3: TRUE && FALSE || 9 >= 4 && 3 < 6
4: TRUE && 62 < 62 && 44 >= 44

Sélection : 3

| You are doing so well!
  |============================================================================================================       |  94%
| Quelle expression a pour résultat FALSE ?

1: 6 >= -9 && !(6 > 7) && !(!TRUE)
2: FALSE || TRUE && 6 != 4 || 9 > 4
3: FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
4: !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79

Sélection : 1

| One more time. You can do it!

| Si vous ne trouvez pas la réponse, essayez chaque expression pour en lire le résultat.

1: FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
2: !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79
3: FALSE || TRUE && 6 != 4 || 9 > 4
4: 6 >= -9 && !(6 > 7) && !(!TRUE)

Sélection : 3

| You almost had it, but not quite. Try again.

| Si vous ne trouvez pas la réponse, essayez chaque expression pour en lire le résultat.

1: FALSE || TRUE && 6 != 4 || 9 > 4
2: 6 >= -9 && !(6 > 7) && !(!TRUE)
3: FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
4: !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79

Sélection : 3

| Keep working like that and you'll get there!
  |===============================================================================================================    |  97%
| C'est la fin de l'introduction à l'évaluation des expressions logiques dans R.

...
  |===================================================================================================================| 100%
| Souhaitez-vous soumettre votre progression sur Moodle à votre enseignant (cela ne fonctionnera que pour les étudiants de
| l'université Paris 8) ? Si vous ne le faites pas maintenant, vous pourrez toujours lui envoyer le fichier 'Logique.txt'
| qui a été créé plus tard.

1: Non
2: Oui

Sélection : 2

| Nice try, but that's not exactly what I was hoping for. Try again.

| Cela soumettra votre avancée dans le cours.

1: Non
2: Oui

Sélection : 2

| Almost! Try again.

| Cela soumettra votre avancée dans le cours.

1: Non
2: Oui

Sélection : 