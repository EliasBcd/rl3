| Attempting to load lesson dependencies...

| Le paquet ‘base64enc’ a été chargé correctement !

| Le paquet ‘ggplot2’ a été chargé correctement !

  |                                                                    |   0%

| Un avantage d'utiliser R, un langage de programmation statistique, est la
| grande quantité d'outils à votre disposition pour effectuer des simulations
| et générer des nombres aléatoires.

...

  |==                                                                  |   3%
| Je ne vous expliquerai pas les différentes distributions de probabilités,
| mais vous en avez déjà vu certaines. Ici, nous les utiliserons pour
| l'échantillonage et la génération de nombres aléatoires.

...

  |====                                                                |   6%
| La première fonction que nous utiliserons pour générer des nombres
| aléatoires est sample(). Regardez l'aide sur cette fonction grâce à
| ?sample.

> ?sample

| That's the answer I was looking for.

  |======                                                              |   9%
| Pour simuler 4 lancements d'un dé à 6 faces, on utilise la commande :
| sample(1:6, 4, replace = TRUE).

> sample(1:6, 4, replace = TRUE)
[1] 4 6 5 6

| Continue comme ça !

  |========                                                            |  12%
| Répetez la commande et observez que les résultats sont différents. (La
| probabilité d'obtenir exactement le même résultat est (1/6)^4 = 0.00077 !)

> sample(1:6, 4, replace = TRUE)
[1] 2 2 6 3

| Your dedication is inspiring!

  |==========                                                          |  15%
| sample(1:6, 4, replace = TRUE) dit à R de tirer aléatoirement 4 fois un
| nombre entre 1 et 6, AVEC remise (c'est l'argument "replace"). Le tirage
| avec remise signifie que le nombre est "remis" à chaque fois, donc il a
| encore la même chance d'être sélectionné la fois suivante. C'est bien ce
| que nous souhaitons obtenir ici, puisque chaque lancé de dé n'affecte pas
| le suivant.

...

  |============                                                        |  18%
| Tirez maintenant aléatoire 10 nombres entre 1 et 20, SANS remise. Pour ce
| faire, enlever simplement l'argument 'replace' de la fonction.

> sample(1:6, 4,  TRUE)
[1] 5 2 5 5

| Tu es tout près... Je le sens ! Encore une fois. ou tape info() pour plus
| d'options.

| Tapez sample(1:20, 10) pour tirer aléatoirement 10 nombres entre 1 et 20,
| sans remise.

> sample(1:20, 10)
 [1]  3 17 10 13  4  5  9 15  2 20

| C'est tout à fait ça !

  |==============                                                      |  21%
| La commande précédente précise qu'il n'y a pas de remise. Chaque nombre de
| la séquence ne peut donc apparaître qu'une seule fois. La valeur par défaut
| de l'argument "replace" est FALSE, ce qui explique pourquoi nous avons du
| le préciser quand nous avons souhaité une remise, mais que nous n'avons pas
| eu besoin de le faire quand nous le souhaitons pas de remise.

...

  |================                                                    |  24%
| LETTERS est un objet prédéfini dans R qui contient les 26 lettres de
| l'alphabet latin en majuscule. Regardez son contenu maintenant.

> LETTRE
Error: object 'LETTRE' not found
> LETTERS
 [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R"
[19] "S" "T" "U" "V" "W" "X" "Y" "Z"

| Quel talent !

  |===================                                                 |  27%
| La fonction sample() permet aussi de permuter les éléments d'un vecteurs.
| Par exemple, essayez sample(LETTERS) pour permuter les 26 lettres de
| l'alphabet.

> sample(LETTERS)
 [1] "E" "C" "L" "W" "B" "F" "P" "I" "Q" "D" "T" "M" "X" "O" "U" "N" "V" "R"
[19] "K" "G" "A" "Z" "Y" "S" "J" "H"

| All that hard work is paying off!

  |=====================                                               |  30%
| Permuter, c'est exactement comme tirer aléatoirement les 26 LETTERS sans
| remise. Quand l'argument 'size' n'est pas spécifié dans sample(), R utilise
| un échantillon de la taille du vecteur à partir duquel nous
| échantillonnons, ce qui crée de fait une permutation.

...

  |=======================                                             |  33%
| Supposons maintenant que nous souhaitons simuler le tirage aléatoire de 100
| pile ou face d'une pièce biaisée. Cette pièce a une probabilité de 0.3
| d'obtenir pile et une probabilité 0.7 d'obtenir face.

...

  |=========================                                           |  36%
| Supposons que 0 représente pile et 1 représente face. Utilisez sample()
| pour tirer aléatoirement un échantillon de taille 100 du vecteur c(0, 1),
| avec remise. Pour préciser que la pièce est biaisée, nous ajoutons
| l'argument prob = c(0.3, 0.7) à la fonction. Celui-ci donne les
| probabilités de chaque valeur. Assignez le résultat à un nouvel objet
| appelé flips.

> sample(1:20, 10)
 [1]  8  2  7 13 15  4 18  5 19 20

| Ce n'est pas la bonne réponse, mais cherche encore. ou tape info() pour
| plus d'options.

| Tapez ceci pour obtenir le résultat demandé : flips <- sample(c(0,1), 100,
| replace = TRUE, prob = c(0.3, 0.7))

> 
> flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))

| Dans le mille ! Bien joué !

  |===========================                                         |  39%
| Regardez le contenu de flips.

> flips
  [1] 0 1 0 1 1 1 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 1 1 1 1 0 1 1 0 1 0 0 0 1 1 0
 [37] 1 1 0 1 1 1 1 1 1 1 1 0 1 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1
 [73] 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 0 0 0 1 1 0 0 1 1 0 1 1

| Tu es extraordinaire !

  |=============================                                       |  42%
| Nous avons mis une probabilité de 0.7 sur face. Nous nous attendons donc à
| trouver à peu près 70 tirages qui valent 1. Comptez le nombre total de 1 en
| utilisant la fonction sum().

> sum()
[1] 0

| Tu es tout près... Je le sens ! Encore une fois. ou tape info() pour plus
| d'options.

| sum(flips) ajoute toutes les valeurs dans le vecteur flips, donc compte le
| nombre de 1.

> sum(flips)
[1] 73

| Perseverance, that's the answer.

  |===============================                                     |  45%
| Un tirage à pile ou face à un résultat binaire (0 ou 1) et nous faisons 100
| tirages indépendants. On peut donc utiliser la fonction rbinom() pour
| simuler des tirages d'une variable aléatoire binomiale. Regardez la
| documentation de rbinom() en utilisant ?rbinom.

> ?rbinom

| Tu es au top !

  |=================================                                   |  48%
| Chaque distribution de probabilité dans R a une fonction r**** (r pour
| 'random'), une fonction d**** (d pour 'densité'), une fonction p**** (p
| pour 'probabilité') et une fonction q**** (q pour 'quantile'). Pour les
| simulations de tirages aléatoires, nous utilisons les fonctions r****. Vous
| pouvez explorer l'usage des autres fonctions avec l'aide.

...

  |===================================                                 |  52%
| Une variable aléatoire binomiale représente le nombre de succès (face) pour
| un nombre donné d'essai indépendant (tirage à pile ou face). On peut
| générer une variable aléatoire unique qui représente le tirage à pile ou
| face de notre pièce biaisée en utilisant rbinom(1, size = 100, prob = 0.7).
| Nous n'avons besoin ici que de spécifier la probabilité de succès (face),
| pas la probabilité d'échec (pile), qui est automatiquement 1 - probabilité
| succès. Essayez.

> rbinom(1, size = 100, prob = 0.7)
[1] 68

| Tu assures !

  |=====================================                               |  55%
| De manière équivalente, si nous voulons voir tous les 0 et 1, on peut
| demander 100 observations, chacune de taille 1 et avec une probabilité de
| succès de 0,7. Essayez en assignant le résultat à un nouvel objet flips2.

> flips2 <- 68

| Bien tenté, mais ce n'est pas exactement ce que j'espérais. Essaie à
| nouveau. ou tape info() pour plus d'options.

| Utilisez rbinom() avec n = 100, size = 1 et prob = 0.7 et assignez le
| résultat à flips2.

> flips2 <- rbinom() avec n = 100, size = 1 et prob = 0.7
Error: unexpected symbol in "flips2 <- rbinom() avec"
> flips2() <- rbinom() avec n = 100, size = 1 et prob = 0.7
Error: unexpected symbol in "flips2() <- rbinom() avec"
> rbinom() avec n = 100, size = 1 et prob = 0.7 <- flips2
Error: unexpected symbol in "rbinom() avec"
> flips2 <- rbinom( n = 100, size = 1 et prob = 0.7)
Error: unexpected symbol in "flips2 <- rbinom( n = 100, size = 1 et"
> flips2 <- rbinom(n = 100, size = 1 et prob = 0.7)
Error: unexpected symbol in "flips2 <- rbinom(n = 100, size = 1 et"
> flips2 <- rbinom(n = 100, size = 1, prob = 0.7)

| Quel talent !

  |=======================================                             |  58%
| Observez le contenu de flips2.

> flips2
  [1] 0 1 1 1 1 1 1 0 0 1 1 0 0 1 1 0 1 1 1 0 1 1 0 1 1 1 1 1 0 0 1 0 1 0 0 1
 [37] 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 1 1 1 1 1 1 0 1 1 0 0 0 1 0 1 1 1 1 1 1 1
 [73] 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 0 1 1 1 0 1

| Continue comme ça !

  |=========================================                           |  61%
| Utilisez maintenant sum() pour compter le nombre de 1 (face) dans flips2.
| Elle devrait être proche de 70.

> sum(flips23)
Error: object 'flips23' not found
> sum(flips2)
[1] 72

| C'est tout à fait ça !

  |===========================================                         |  64%
| Tout comme rbinom(), on peut utiliser R pour simuler le résultat de
| beaucoup d'autres distributions. Cherchez la documentation pour rnorm.

> ?rnorm

| Excellent travail !

  |=============================================                       |  67%
| La distribution normale classique (la Gaussienne) a une moyenne de 0 et un
| écart-type de 1. Comme vous pouvez le lire dans la partie 'Usage' de la
| documentation, les valeurs par défaut des arguments 'mean' (moyenne) et
| 'sd' (écart-type) sont 0 et 1. rnorm(10) générera donc 10 nombres
| aléatoires à l'aide de la distribution Gaussienne. Essayez.

> rnorm(10)
 [1] -0.1739745 -0.2727572 -1.4650324 -1.1448326 -0.8936796  0.1930564
 [7]  0.6133379  0.2371457 -0.9591608 -1.1448546

| Your dedication is inspiring!

  |===============================================                     |  70%
| Faites maintenant la même chose avec une moyenne de 100 et un écart-type de
| 25.

> rbinom() avec n = 100, size = 1 et prob = 0.7)
Error: unexpected symbol in "rbinom() avec"
> rbinom() avec n = 100, size = 1 et prob = 0.7
Error: unexpected symbol in "rbinom() avec"
> rnorm(n = 5, mean = 0, sd = 1)
[1]  1.0333218 -1.2784755 -0.2405012  2.3198081  0.5571791

| Tente encore une fois. ou tape info() pour plus d'options.

| Utilisez rnorm(10, mean = 100, sd = 25) pour générer 10 nombres aléatoires
| tiré d'une loi normale de moyenne 100 et d'écart-type 25.

> 
> rnorm(10, mean = 100, sd = 25)
 [1] 101.36855  88.55308  93.20544  83.04150  60.35184  49.70223 124.04973
 [8] 101.48936  92.91412 102.55212

| Keep working like that and you'll get there!

  |=================================================                   |  73%
| Enfin, nous voulons générer 100 groupes de nombres aléatoires. Chaque
| groupe contiendra 5 valeurs générées par une loi uniforme entre -1 et 1.
| Commençons par un premier groupe de 5 nombre. Je vous expliquerai par la
| suite comment répéter facilement l'opération 100 fois.

...

  |====================================================                |  76%
| Générer 5 valeurs aléatoires issues d'une distribution uniforme sur -1, 1.
| Utilisez la documentation de runif() si vous avez besoin d'aide.

> ?runif()
> runif(n, min = -1, max = 1, lower.tail = TRUE, log.p = FALSE)
Error in runif(n, min = -1, max = 1, lower.tail = TRUE, log.p = FALSE) : 
  unused arguments (lower.tail = TRUE, log.p = FALSE)
> runif(n, min = -1, max = 1)
Error in runif(n, min = -1, max = 1) : arguments incorrects
> runif(n = 5, min = -1, max = 1)
[1]  0.2962936 -0.4821561 -0.8502351  0.2970231  0.1503433

| All that hard work is paying off!

  |======================================================              |  79%
| Utilisez maintenant replicate(100, runif(5, -1, 1)) pour répéter
| l'opération 100 fois. Stockez le résultat dans une nouvelle variable
| mon_unif.

> replicate(100, runif(5, -1, 1))
           [,1]       [,2]         [,3]       [,4]       [,5]        [,6]
[1,]  0.7070702  0.7294503 -0.850197575  0.2777394  0.8890066 -0.14942562
[2,]  0.4009180  0.9186070  0.980682055  0.7257274 -0.4821666  0.71965441
[3,]  0.1635293 -0.3058629  0.001211378 -0.7669171  0.2431953 -0.02606791
[4,] -0.5310579  0.3487228  0.170469710  0.1946163  0.9335984 -0.99894035
[5,]  0.2373781  0.1297715 -0.162309241  0.9688474  0.7684365 -0.94537460
          [,7]       [,8]        [,9]       [,10]       [,11]       [,12]
[1,] 0.9304498 -0.9790797 -0.07745091  0.36372137 -0.95635836  0.43493885
[2,] 0.2641992 -0.3262568  0.71720444 -0.37149046  0.20420139  0.23305154
[3,] 0.4652541 -0.9455064 -0.42170704  0.28549209 -0.01270516 -0.83868681
[4,] 0.3213486  0.1102343 -0.97419573 -0.55022973 -0.33904386 -0.93221514
[5,] 0.7230015  0.5526729 -0.33154577 -0.05514906  0.54153056 -0.03341512
           [,13]      [,14]       [,15]      [,16]      [,17]      [,18]
[1,] -0.40973318 -0.9584260  0.42179861  0.6727387  0.3664677 -0.0987248
[2,] -0.04138739  0.6634717  0.36439051  0.7404926 -0.9737843  0.7571591
[3,]  0.01467796  0.3502927  0.84640471 -0.4357452 -0.1122041  0.7116287
[4,]  0.37834684  0.5223504 -0.18912698  0.9867024  0.3091152  0.8979099
[5,] -0.99529287  0.1827823 -0.06269172 -0.4358583 -0.5179673  0.8387030
          [,19]       [,20]      [,21]       [,22]      [,23]      [,24]
[1,]  0.6232034 -0.94070574 -0.1149244  0.28423527  0.7263989 0.79037536
[2,] -0.7898478  0.22080236 -0.3762471  0.06682758  0.6910073 0.09164909
[3,] -0.7684364 -0.05486481  0.6513420 -0.59030994  0.9556771 0.82546677
[4,]  0.3190109 -0.56412063  0.2425976 -0.96084099  0.7473044 0.29202861
[5,] -0.8883776  0.32525653  0.1404757  0.19199258 -0.3713863 0.21283990
         [,25]      [,26]      [,27]      [,28]      [,29]      [,30]
[1,] 0.3507271 -0.1157204  0.2189065  0.1368111  0.6724565 -0.2290388
[2,] 0.9722595 -0.5361830 -0.2067128 -0.7620750 -0.2050938  0.6961277
[3,] 0.6711442 -0.9514449 -0.5329163  0.4078155  0.5615752  0.6119479
[4,] 0.5046310  0.5231088 -0.3058870 -0.1262068  0.5222011 -0.4063205
[5,] 0.8313648  0.8731924  0.7488438 -0.2236602 -0.4087106 -0.8216835
           [,31]       [,32]       [,33]      [,34]       [,35]       [,36]
[1,]  0.02816783  0.45276549 -0.86424234 -0.3483052  0.27739543 -0.01597656
[2,] -0.48819459  0.39377800 -0.21684524 -0.3636521 -0.65976281 -0.36288086
[3,] -0.07557571 -0.04652512 -0.60654068 -0.4948502  0.96316415 -0.92131054
[4,] -0.40557366 -0.12133441 -0.09196849  0.5162743 -0.07839332 -0.87076662
[5,] -0.27573173  0.46615971 -0.03815713  0.4566149 -0.58849720 -0.80386557
          [,37]       [,38]      [,39]       [,40]       [,41]      [,42]
[1,] -0.6167866  0.03033455 -0.9165208  0.54248713 -0.11167999  0.6525961
[2,]  0.1009440  0.36402373  0.2481541  0.93874900  0.36790744 -0.3892919
[3,] -0.3301423  0.30818901 -0.7552402 -0.58201467  0.78726404 -0.3082214
[4,] -0.6808589 -0.99428946 -0.1617654  0.80835051  0.06054771 -0.4686407
[5,] -0.7746642  0.19157883  0.4319907  0.01752748  0.13386189  0.4054542
          [,43]      [,44]       [,45]      [,46]      [,47]        [,48]
[1,] -0.6449731  0.1391261 -0.53918545  0.5866454 -0.6055282 -0.171053388
[2,]  0.4627328  0.8243448  0.27588953 -0.5167984  0.2394868 -0.001866137
[3,]  0.5503634 -0.3211479 -0.09104086  0.3410698  0.6410285  0.410847457
[4,] -0.2470484 -0.2439890 -0.76443400 -0.8128620 -0.2706261 -0.360647559
[5,] -0.7948424  0.9662101  0.54433368 -0.8055984 -0.1345881 -0.888346928
           [,49]       [,50]       [,51]       [,52]      [,53]      [,54]
[1,] -0.94703425  0.02308069 -0.15260500 -0.87890533 -0.4729015  0.9325202
[2,] -0.06280756  0.42992650  0.01397868  0.40021994 -0.7099651 -0.1727244
[3,] -0.35136484  0.39804515 -0.39972750 -0.56917139 -0.7443541 -0.7912883
[4,] -0.85453254  0.30018330 -0.78893921 -0.61423671 -0.6325471 -0.2592393
[5,]  0.12935233 -0.79375837 -0.53466085  0.08029054  0.1510811  0.4755417
           [,55]      [,56]      [,57]      [,58]       [,59]      [,60]
[1,] -0.02216185 -0.4377437 0.61602127  0.2284436 -0.25104621 -0.7722057
[2,] -0.03809155 -0.8231785 0.98849953 -0.9472484  0.17192037 -0.1039952
[3,] -0.46888836  0.5914960 0.01344402  0.2601368  0.68213091  0.4316716
[4,] -0.01380969  0.9210964 0.47076959 -0.3959670  0.31795370 -0.8349358
[5,] -0.54351596  0.1030423 0.95776488  0.1892736  0.09300835 -0.1585444
            [,61]      [,62]      [,63]      [,64]       [,65]      [,66]
[1,] -0.196177060  0.6864505  0.3527391  0.8831181 -0.50184313 -0.0465748
[2,]  0.699504452  0.6723692 -0.1365750  0.6564311 -0.51654389  0.7138964
[3,]  0.195730427 -0.6059255 -0.7042849  0.2360231 -0.48317093  0.1509883
[4,] -0.008610104  0.1944008 -0.2841920  0.5607037  0.93634154  0.1765077
[5,] -0.885670962  0.5437766  0.7588528 -0.6727291 -0.05246124 -0.4559551
          [,67]      [,68]      [,69]      [,70]       [,71]      [,72]
[1,]  0.7235951 -0.2590629  0.3625724  0.3449030  0.12719629 -0.5785530
[2,]  0.5043920  0.1668820 -0.1570827  0.5436882  0.08823875  0.7280484
[3,]  0.2748541  0.6725557  0.8546788  0.3980954 -0.91357641 -0.4583886
[4,] -0.9041162 -0.6006788  0.5981645 -0.9278828 -0.14852631  0.5582790
[5,]  0.8172264  0.7816286  0.7447564  0.8724605 -0.63528231  0.8179321
           [,73]      [,74]      [,75]       [,76]      [,77]      [,78]
[1,]  0.87125716  0.2533344  0.3079228 -0.08983267  0.2899317 -0.7501018
[2,]  0.31351738  0.7525506  0.8394007 -0.77582635 -0.9786015 -0.3887784
[3,] -0.88180281 -0.7705451  0.5949332 -0.39127909 -0.7183553  0.6135286
[4,]  0.06046601  0.7296139 -0.9198742 -0.10061532 -0.6174242  0.9618298
[5,] -0.18852819  0.6665898 -0.5753272  0.22727117  0.5473050  0.2979796
           [,79]       [,80]      [,81]       [,82]      [,83]     [,84]
[1,]  0.96406944  0.06265756  0.4482775 -0.92289295 -0.2107574 0.9943245
[2,]  0.01235307 -0.41661161  0.9118955  0.02216517  0.5057544 0.6048989
[3,]  0.63825904 -0.33497981 -0.1795363 -0.65372279  0.9678946 0.6317827
[4,] -0.08568802 -0.16392262 -0.6177399  0.13709187  0.3891966 0.8344937
[5,] -0.74147597  0.67735519 -0.5200401  0.28721058 -0.3803708 0.8087089
          [,85]      [,86]      [,87]      [,88]      [,89]      [,90]
[1,]  0.3619738 -0.6096004 -0.3365764  0.9025436  0.8699432  0.5389727
[2,] -0.8661332  0.6413308 -0.4681592  0.8825745  0.6841868  0.5107886
[3,]  0.6580634  0.2071332 -0.4043946 -0.1455425 -0.4067088 -0.2175733
[4,] -0.1815085  0.1869010  0.1152728 -0.4258540 -0.7208066  0.7737292
[5,] -0.5273765  0.1056757 -0.7624250  0.5322539 -0.9198892  0.6113052
          [,91]      [,92]      [,93]      [,94]      [,95]       [,96]
[1,] -0.4267409 -0.3724066 -0.3158897 -0.3785034 -0.3551306  0.85007299
[2,] -0.4584672 -0.7862917 -0.0722780  0.3334993  0.5662977 -0.06504174
[3,] -0.0375150 -0.6282188  0.6325259  0.7248653  0.9589523 -0.48301220
[4,]  0.3295413  0.3160629  0.2793645  0.5836025 -0.3883209  0.06845502
[5,]  0.1928242  0.1432502  0.2978441  0.2203212 -0.2260665 -0.54116227
           [,97]      [,98]      [,99]     [,100]
[1,] -0.77174680 -0.1986061  0.8248168 -0.7073386
[2,] -0.56717078 -0.4597130 -0.6328512 -0.7467905
[3,] -0.85417187 -0.2646116  0.4762043  0.7784648
[4,]  0.04357147  0.7291360  0.3591822  0.5665349
[5,]  0.21850970 -0.3162353 -0.6524908  0.8444699

| One more time. You can do it! ou tape info() pour plus d'options.

| mon_unif <- replicate(100, runif(5, -1, 1)) répétera le résultat 100 et
| stockera le résultat.

> mon_unif <- replicate(100, runif(5, -1, 1))

| C'est la bonne réponse !

  |========================================================            |  82%
| Regardez le contenu de mon_unif.

> mon_unif
            [,1]        [,2]       [,3]       [,4]       [,5]       [,6]
[1,]  0.65430144 -0.41401380 -0.6962494  0.9403433 -0.6444857  0.5786989
[2,]  0.79960229 -0.96589216 -0.1998711  0.9363489  0.7898736  0.6925581
[3,]  0.04601124  0.71525982  0.6008986 -0.7016825 -0.3867890  0.1678343
[4,] -0.74773103  0.59413206  0.9944651  0.3755878 -0.8553182  0.8216495
[5,] -0.67301433  0.01738385 -0.7976939 -0.8927858  0.1209904 -0.1750517
           [,7]       [,8]        [,9]      [,10]      [,11]      [,12]
[1,] -0.7783911 -0.7122592  0.44671578 -0.6373170 -0.4155247 -0.8512944
[2,] -0.4961673  0.4464195 -0.78373621 -0.9869313  0.3468873  0.8666829
[3,]  0.8872564  0.1031722 -0.04365329  0.3081078  0.3637182  0.7513055
[4,]  0.6833680 -0.6040615 -0.27814695 -0.8034004  0.9940298 -0.7691908
[5,]  0.2096676 -0.8626778 -0.81118563  0.1753914 -0.2883714 -0.8045282
          [,13]      [,14]      [,15]       [,16]       [,17]      [,18]
[1,] -0.2393394 -0.4847321  0.7580478  0.62628505 -0.09848991 -0.2611776
[2,] -0.2053480 -0.7784672 -0.2638519 -0.04187069 -0.19105376  0.6906594
[3,] -0.6888481  0.7238861 -0.9679382 -0.75859591  0.27141194  0.9762715
[4,]  0.9515997  0.8590177  0.4310976  0.42941822 -0.25422987  0.3238956
[5,]  0.1320868 -0.3355503 -0.5777539  0.86990504  0.51815506 -0.7143518
           [,19]      [,20]      [,21]      [,22]      [,23]      [,24]
[1,]  0.01738437 -0.2273523  0.5178582 -0.9327750  0.4485038  0.2537605
[2,] -0.77143713 -0.2383444 -0.4759817 -0.8742332  0.4422278  0.6347111
[3,]  0.25477287 -0.6729687  0.4915230  0.1617071 -0.8734642 -0.7932609
[4,]  0.69593004 -0.1618939 -0.4335212  0.8666700 -0.6583409  0.9805189
[5,] -0.68407166  0.4507285  0.9445385  0.7184424 -0.8606026  0.4254265
           [,25]      [,26]     [,27]      [,28]      [,29]      [,30]
[1,]  0.63550768  0.9654647 0.4695509  0.1526751 -0.7593797 -0.1172153
[2,] -0.09642762  0.5327536 0.9208873  0.5721202  0.4722232 -0.4547292
[3,]  0.16621930 -0.2116492 0.1802827 -0.5141574 -0.8861105  0.8323695
[4,] -0.39300176  0.5913159 0.8795680 -0.1926194  0.3308264  0.5133888
[5,]  0.10656745  0.4220091 0.5802325 -0.8451597  0.5419903  0.8239289
          [,31]       [,32]       [,33]      [,34]       [,35]      [,36]
[1,]  0.4961283  0.83934570  0.49102647 -0.5570614  0.72174781  0.8341227
[2,] -0.9172260  0.77660924 -0.04856301  0.1519172 -0.13997890  0.4180004
[3,]  0.1383031  0.05090732 -0.83995486 -0.2659579 -0.68934822  0.7086650
[4,] -0.2945841 -0.98837359 -0.30398879  0.9940759  0.73925170  0.3924296
[5,] -0.6449748  0.63419643 -0.13772940 -0.7585956 -0.02242614 -0.6060218
           [,37]      [,38]       [,39]      [,40]      [,41]      [,42]
[1,]  0.03923525 -0.4939248 0.332762180  0.9670077 -0.4007272 -0.5292939
[2,] -0.80384025 -0.5770132 0.986050951 -0.9022784  0.6658066  0.8180298
[3,]  0.17286672  0.7600967 0.766472000  0.5436439 -0.1878057 -0.3603468
[4,]  0.81223172 -0.1486798 0.874458779 -0.6659609 -0.8850729 -0.9151514
[5,] -0.22147149  0.6117758 0.002869667 -0.1150939  0.7911551  0.1883093
           [,43]      [,44]      [,45]     [,46]      [,47]       [,48]
[1,]  0.17173417 -0.2804179 -0.3892901 0.6118217  0.6716769 -0.97916905
[2,] -0.66737857 -0.9383096  0.9988300 0.4371794 -0.3065644  0.81470083
[3,]  0.94869241 -0.1849665  0.8216849 0.4865073 -0.6145337  0.27592824
[4,]  0.06784661  0.2027616 -0.9821281 0.1246556 -0.3929475  0.50158753
[5,] -0.18773136 -0.2807219 -0.3439317 0.3699694  0.3672032 -0.09655734
          [,49]      [,50]      [,51]      [,52]      [,53]       [,54]
[1,] -0.9746565 -0.4403220 -0.9989808  0.3871032 -0.3017196  0.19363761
[2,] -0.6805932 -0.8978130  0.6200377 -0.7649346 -0.8685359 -0.08225882
[3,]  0.1723309 -0.7462744 -0.6014458 -0.8895334 -0.7279608 -0.71766527
[4,]  0.9205566  0.1253337  0.5215510  0.4779441 -0.8415839 -0.83666835
[5,]  0.9385435  0.3877450 -0.4276171 -0.9955873  0.9588109  0.49462324
          [,55]      [,56]      [,57]      [,58]     [,59]      [,60]
[1,]  0.5899660 0.16214107 -0.1610110 -0.9083424 0.3096768  0.9444811
[2,] -0.8538377 0.60146995 -0.7967843 -0.1970167 0.8411880  0.7335033
[3,] -0.9309190 0.32866365 -0.2687868  0.6562286 0.2804203 -0.1565345
[4,]  0.2485749 0.57161888  0.9315829 -0.8331999 0.3391954  0.5084570
[5,] -0.2276838 0.01774813  0.1254023 -0.5697672 0.2045090  0.4977672
          [,61]       [,62]     [,63]      [,64]      [,65]      [,66]
[1,]  0.3160320  0.01493324 0.8713289 -0.4332656  0.2254915 -0.2257078
[2,] -0.6868901 -0.10200446 0.4711504  0.3075086 -0.5929284 -0.3306179
[3,] -0.9444296  0.17483944 0.7279888  0.3921758  0.1344454 -0.6849117
[4,]  0.6281655 -0.50972050 0.7302785  0.7782306  0.9439229 -0.4410544
[5,] -0.6083311  0.69543804 0.5239694 -0.2845646 -0.9010352  0.6384062
          [,67]       [,68]      [,69]       [,70]      [,71]      [,72]
[1,] -0.5541837 -0.08632159  0.2031998  0.09347725  0.1362618 -0.1416068
[2,]  0.9910049  0.57510205  0.1382281 -0.18536410  0.8547692 -0.1564242
[3,]  0.6863860 -0.25164072 -0.9378136 -0.16610414  0.4679401  0.4122301
[4,] -0.3492848 -0.22484061 -0.2133247  0.59995405 -0.7960808 -0.4453361
[5,]  0.8093082 -0.49588853 -0.6386758 -0.74067320  0.8817679  0.9002165
          [,73]      [,74]       [,75]      [,76]       [,77]      [,78]
[1,]  0.4587953 -0.5499211  0.99133238  0.4539621 -0.90737482 -0.1400786
[2,] -0.3555629  0.3545098  0.52296402 -0.4826831  0.13974549  0.2805311
[3,]  0.6789095 -0.8724803 -0.03788896 -0.8296638 -0.05725244 -0.7752684
[4,] -0.7035594  0.3037937  0.09255901 -0.4874503  0.75828476  0.3484135
[5,]  0.9115670  0.1609838 -0.83160386 -0.3683813 -0.32665439  0.2921601
           [,79]       [,80]      [,81]       [,82]       [,83]      [,84]
[1,]  0.42353527  0.05272002  0.1657834 -0.77184412  0.18555469  0.1867554
[2,]  0.32707972 -0.94051825  0.6064725 -0.07274337  0.80345766 -0.5083007
[3,] -0.32953313 -0.14040521 -0.7204098 -0.08252312  0.07615674  0.5094183
[4,] -0.25024236 -0.52394582 -0.6959718 -0.95308034 -0.64421928  0.4052961
[5,] -0.03652878 -0.25267239  0.1075838  0.47970316 -0.11915410  0.2754348
           [,85]      [,86]      [,87]      [,88]      [,89]       [,90]
[1,]  0.24043219 -0.6126116 -0.2601217 0.28314671  0.8863120  0.01617515
[2,] -0.88051562 -0.4787133  0.3131338 0.06425195 -0.5464478  0.41378550
[3,]  0.73303229 -0.9935831  0.4502871 0.55945961 -0.5446961 -0.85434846
[4,] -0.05347707  0.2034907  0.8236732 0.74499590  0.8762521  0.29245652
[5,] -0.04555092  0.6745718 -0.7346649 0.58446210 -0.2206657 -0.51112290
           [,91]      [,92]       [,93]      [,94]       [,95]       [,96]
[1,] -0.11301040  0.7943010 -0.31551951  0.7298312  0.43351922 -0.25402115
[2,]  0.54077568  0.8284331 -0.34560932  0.8474244  0.06837757  0.03040761
[3,] -0.06484722 -0.8327448 -0.39731394  0.6564137  0.90852720 -0.83064329
[4,]  0.59332511  0.2779444  0.09836728 -0.8664427 -0.77738430  0.71768391
[5,] -0.50445693 -0.8740870 -0.54057402 -0.7853654 -0.30344723  0.51651502
           [,97]       [,98]       [,99]     [,100]
[1,]  0.02753015 -0.97602197  0.19465181 -0.3907832
[2,]  0.43812464  0.53057744  0.25574634 -0.7453231
[3,] -0.42683283 -0.08836401 -0.04277027  0.2328173
[4,]  0.14677590  0.18479205  0.90139686 -0.1811672
[5,]  0.97247902  0.98577076 -0.03700705  0.4731676

| Continue comme ça !

  |==========================================================          |  85%
| replicate() a créé une matrice, chaque colonne contient 5 nombres
| aléatoires issus de la distribution spécifiée. Nous pouvons trouvez
| maintenant trouver la moyenne dans chaque colonne à l'aide de colMeans().
| Stockez le résultat dans l'objet cm.

> colMeans()
Error in is.data.frame(x) : argument "x" is missing, with no default
> cm<- colMeans(mon_unif)

| Excellent work!

  |============================================================        |  88%
| Regardons l'histogramme du résultat à l'aide de ggplot(data.frame(cm = cm))
| + geom_histogram(aes(cm))

> ggplot(data.frame(cm = cm)) + geom_histogram(aes(cm))
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.

| That's the answer I was looking for.

  |==============================================================      |  91%
| Nos valeurs moyennes semblent presque suivre une distribution normale.
| C'est le théorème centrale limite, que vous n'avez peut-être pas vu.

...

  |================================================================    |  94%
| Toutes les distributions aléatoires classiques sont incluses dans R, y
| compris exponentielle (rexp()), chi-deux (rchisq()), gamma (rgamma()), ...

...

  |==================================================================  |  97%
| Vous avez maintenant les bases des tirages aléatoires, même si nous n'avons
| fait que toucher le début du sujet.

...

  |====================================================================| 100%
| Souhaitez-vous soumettre votre progression sur Moodle à votre enseignant
| (cela ne fonctionnera que pour les étudiants de l'université Paris 8) ? Si
| vous ne le faites pas maintenant, vous pourrez toujours lui envoyer le
| fichier 'Tirages_aleatoires.txt' qui a été créé plus tard.

1: Non
2: Oui

Sélection : 2

| Tu assures !

| Tu es arrivé(e) au bout de cette leçon! Retour au menu principal...

| Choisis un cours ou tape 0 pour quitter Swirl.

1: InitiationR
2: Montre-moi le répertoire des cours Swirl !

Sélection : 0