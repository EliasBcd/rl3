> library(swirl)

| Hi! Type swirl() when you are ready to begin.

> install_course_github('EliasBcd', 'InitiationR')
Downloading: 93 kB     
> select_language('french', append_rprofile = TRUE)
> swirl()

| Bienvenue sur Swirl ! Connecte-toi. Si ce n'est pas ta première
| connexion, indique ton nom utilisé précédemment. Si tu dois
| encore choisir ton nom, fais preuve d'un peu d'originalité !

Comment dois-je t'appeler ? Nivediha

| Merci, Nivediha. Quelques instructions de base avant d'attaquer
| la première leçon. Tout d'abord, si tu vois s'afficher '...',
| cela veut dire que tu dois appuyer sur Entrée quand tu as fini
| de lire et es prêt(e) à continuer.

...  <-- That's your cue to press Enter to continue

| Et quand tu vois 'Réponse:', le prompt R (>), ou si tu es
| invité(e) à sélectionner une option, c'est à toi de taper ta
| réponse et d'appuyer sur Entrée pour continuer.

Select 1, 2, or 3 and press Enter 

1: Continuer.
2: Avancer.
3: C'est parti !

Selection: 1

| You can exit swirl and return to the R prompt (>) at any time by
| pressing the Esc key. If you are already at the prompt, type
| bye() to exit and save your progress. When you exit properly,
| you'll see a short message letting you know you've done so.

| Quand tu es arrivé(e) au prompt R (>):
| -- Tape skip() pour sauter la question.
| -- Tape play() pour expérimenter et jouer avec R; Swirl en fera
| abstraction...
| -- JUSQU'A ce que tu tapes nxt() pour regagner l'attention de
| Swirl.
| -- Tape bye() pour quitter Swirl. Ta progression sera
| sauvegardée.
| -- Tape main() pour retourner au menu principal de Swirl.
| -- Tape info() pour montrer les options une nouvelle fois.

| C'est parti !

...

| Choisis un cours ou tape 0 pour quitter Swirl.

1: InitiationR
2: Montre-moi le répertoire des cours Swirl !

Selection: 1

| Choisis une leçon ou tape 0 pour retourner au menu principal.

 1: Manipulations simples
 2: Assignations et objets
 3: Types
 4: Vecteurs
 5: Fichiers et espace de travail
 6: Logique
 7: Valeurs manquantes
 8: Vecteurs numériques
 9: Dataframes
10: Scripts et fonctions
11: Control Flow
12: Representations graphiques
13: Tirages aleatoires

Selection: 11

| Attempting to load lesson dependencies...

| Cette leçon requiert le paquet ‘base64enc’ . Voudrais-tu que je
| l'installe pour toi maintenant ?

1: Oui
2: Non

Selection: 1

| Installation du paquet ‘base64enc’ maintenant...

| Le paquet ‘base64enc’ a été chargé correctement !

| Cette leçon requiert le paquet ‘iterators’ . Voudrais-tu que je
| l'installe pour toi maintenant ?

1: Oui
2: Non

Selection: 1

| Installation du paquet ‘iterators’ maintenant...

| Le paquet ‘iterators’ a été chargé correctement !

  |                                                         |   0%

| Nous allons aborder dans cette leçon deux outils importants en
| programmation. Premièrement, l'évaluation conditionnelle (`if`
| et `else`). Deuxièmement, les boucles (`for`, `while` et
| `repeat`). La syntaxe exacte diffère généralement entre les
| langages, mais les idées et le fonctionnement sont similaires.

...

  |====                                                     |   6%
| Commençons par une version simple pour comprendre le
| fonctionnement de if. La syntaxe générale est 'if(condition)
| action_si_TRUE else action_si_FALSE'. Notez que la partie 'else
| action_si_FALSE' est facultative. Nous allons utiliser une
| condition toujours vraie (TRUE) pour le voir. Essayez de taper
| if(TRUE) 1 else 2.

> if(TRUE) 1 else 2
[1] 1

| Bon boulot !

  |=======                                                  |  12%
| La partie entre parenthèses correspond à la condition que R
| évalue. Ici, pour simplifier la compréhension, nous avons
| directement utilisé une valeur logique comme condition. En
| général, c'est une expression logique que R teste (3 < 4 par
| exemple). Comme la condition est vraie, R nous renvoie 1. Si la
| condition est FALSE, R nous renverra la valeur donnée après le
| else. Essayez maintenant la même expression en remplaçant TRUE
| par FALSE.

> if(FALSE) 1 else 2
[1] 2

| C'est du bon boulot !

  |===========                                              |  19%
| Une capacité importante de `if` est la possibilité d'assigner le
| résultat. On peut par exemple assigner le résultat de
| l'expression précédente à l'objet `x`. Essayez.

> x <- if(FALSE) 1 else 2

| Quelle maîtrise !

  |==============                                           |  25%
| Que vaut x à votre avis ?

1: NA
2: 2
3: 1

Selection: 2

| Dans le mille ! Bien joué !

  |==================                                       |  31%
| Remarquez que la condition doit avoir une unique valeur TRUE ou
| FALSE. Parmi les expressions suivante, laquelle correspond à
| cette contrainte (et donc laquelle ne renverra pas d'erreur) ?

1: if (NA) 1
2: if (logical()) 1
3: if (c(TRUE, FALSE)) 1
4: if ("x") 1
5: if(3>4) 3 else 4

Selection: 5

| Dans le mille ! Bien joué !

  |=====================                                    |  38%
| On veut parfois utiliser plusieurs conditions enchaînées. Par
| exemple, si on veut créer une fonction mention en fonction des
| notes des étudiants. Pour ce cas, plutôt que d'utiliser des
| conditions `if` emboîtée, il est possible d'utiliser `else if`.
| Une fois que vous avez modifié le script qui apparaît à l'écran,
| pensez à bien l'enregistrer et tapez submit() dans la console.

> submit()

| Chargement de ton script...


| Bravo!

  |=========================                                |  44%
| Testons maintenant cette nouvelle fonction. Essayez d'obtenir la
| mention correspondant à une moyenne de 13.5.

> mention(13.5)
[1] "Assez bien"

| Excellent travail !

  |============================                             |  50%
| Les boucles servent elles à itérer sur des inputs et à faire une
| action pour chaque input. La syntaxe classique est 'for (item in
| vecteur) action'. Par exemple, on peut écrire la boucle suivante
| : for(i in 1:3) print(i) Essayez

> for (i in 1:3) print(i)
[1] 1
[1] 2
[1] 3

| Excellent travail !

  |================================                         |  56%
| Analysons un petit peu ce que nous avons écrit et les résultats
| obtenus. Notre item ici s'appelle i. Le vecteur est donné par
| 1:3, c'est donc les trois éléments 1, 2 et 3. print() est une
| fonction très utile de R qui affiche dans la console ce qui est
| à l'intérieur. On a donc obtenu comme sortie 1 puis 2, puis 3,
| ce qui correspond à l'affichage de l'incrémentation de i par la
| boucle for.

...

  |====================================                     |  62%
| Plusieurs commandes permettent de contrôler un peu plus finement
| le comportement d'une boucle for, les mots-clés `next` et
| `break`. `next` dit à R de sortir de l'itération actuelle.

> submit()

| Chargement de ton script...


| Tu es au top !

  |=======================================                  |  69%
| `break` dit à R de sortir de l'itération actuelle.

> submit()

| Chargement de ton script...


| Bon boulot !

  |===========================================              |  75%
| Nous avons vu une première façon de faire des boucles à l'aide
| de la commande for. Les boucles for sont celles que vous allez
| utiliser le plus souvent. Elle a néanmoins un défaut qui peut
| être génant, elle nécessite de connaître le vecteur sur lequel
| l'itération a lieu. Quand on ne connaît pas à l'avance le nombre
| d'itération, deux mots clés peuvent nous aider, while et repeat.

...

  |==============================================           |  81%
| La syntaxe de while est la suivante `while(condition) action`.
| `while` crée une boucle infinie, qui ne s'arrête que quand la
| condition devient FALSE. Il faut donc être prudent avec ce type
| de boucle et vérifier que la condition devient FALSE à un moment
| donné.

...

  |==================================================       |  88%
| Imaginons maintenant que nous avons une fonction, variation()
| qui donne l'évolution du prix d'une action au fil du temps. Le
| prix d'origine de l'action est de 50€. Nous souhaitons la vendre
| dès que son prix dépasse 60€ pour empocher les gains ou descend
| sous les 40€ pour limiter les pertes. Ecrivez une fonction qui
| le permet. Elle devra nous renvoyer le jour où l'action a été
| vendue.

> submit()

| Chargement de ton script...


| Tu y es presque. Essaie encore.

| Faites attention aux conditions infinies. Rappelez-vous qu'il
| est possible de tester deux conditions simultanément à l'aide
| de &&.

> submit()

| Chargement de ton script...


| All that practice is paying off!

  |=====================================================    |  94%
| Nous avons fini cette leçon. Vous avez maintenant un des
| concepts les plus important de R et du monde de la
| programmation, les boucles et les conditions.

...

  |=========================================================| 100%
| Souhaitez-vous soumettre votre progression sur Moodle à votre
| enseignant (cela ne fonctionnera que pour les étudiants de
| l'université Paris 8) ? Si vous ne le faites pas maintenant,
| vous pourrez toujours lui envoyer le fichier 'Control_Flow.txt'
| qui a été créé plus tard.

1: Oui
2: Non

Selection: 1

| Your dedication is inspiring!

| Tu es arrivé(e) au bout de cette leçon! Retour au menu
| principal...

| Choisis un cours ou tape 0 pour quitter Swirl.

1: InitiationR
2: Montre-moi le répertoire des cours Swirl !

Selection:


Mention.R :
# Si nous voulons créer une fonction temps qui prend le temps mis pour faire un 100m
# pour un homme et qui nous renvoie à quel point le temps est bon ou pas, nous 
# procédons de la sorte :
# 
# temps <- function(x) {
#   if (x<9.69) {
#     "Record du monde"
#   }
#   else if (x < 10) {
#     "Champion du monde"
#   }
#   else if (x <11) {
#     "Très rapide"
#   }
#   else {
#     "Personne normale"
#   }
# }
# 
# Analysons ce code. 
# L'évaluation conditionnelle commence par 'if'. 
# Les condition 'else if' capturent progressivement les autres temps. 
# Si x n'est pas plus petit que 9.69, alors on teste si x est plus petit que 10, etc.
# La dernière condition est else (qui n'est pas obligatoire). 
# Elle capture tous les temps qui n'ont pas été capturés auparavant.
# 
# Imaginons que vous voulez maintenant créé une fonction mention qui donne automatiquement
# la mention correspondant à une moyenne.
# On considère ici que 16 ou plus donne Très bien.
# Entre 14 (inclus) et 16 (exclus) donne Bien.
# Entre 12 (inclus) et 14 (exclus) donne  Assez bien.
# Et les autres notes ne donnent pas le droit à une mention.


mention <- function(x) {
  if (x >= 16) {
    "Très bien"
  }
  else if (x >= 14){
    "Bien"
  }
  else if (x>=12){
    "Assez bien"
  }
  else {
    ""
  }
}

Pair.R : 
# for (i in 1:10) {
#   if (i < 3) 
#     next
#   
#   print(i)
#   
#   if (i >= 5)
#     break
# }
# 
# Voici un exemple d'utilisation de next et break.
# next dira à R de passer à l'itération suivante dès que i est plus petit que 3, 
# de sorte que 1 et 2 ne seront pas affiché par print().
# break dit à R d'arrêter l'itération dès que i atteint la valeur 5, mais après 
# avoir affiché la valeur 5.
# 
# On veut sélectionner des éléments d'un vecteur seulement les éléments pairs, en utilisant next.
# Une partie du code a été écrite pour vous, complétez où c'est indiquer
#
# Conseil :
#   - #1 : L'opérateur qui donne le reste dans la division euclidienne d'un nombre est %%.

 
pair <- function(x){
  res <- c()
  for (i in x){
    if (i %% 2 == 1)
      print(next)
    res <- c(res, i)
  }
  res
}

Break.R :
# for (i in 1:10) {
#   if (i < 3) 
#     next
#   
#   print(i)
#   
#   if (i >= 5)
#     break
# }
# 
# Voici un exemple d'utilisation de next et break.
# next dira à R de passer à l'itération suivante dès que i est plus petit que 3, 
# de sorte que 1 et 2 ne seront pas affiché par print().
# break dit à R d'arrêter l'itération dès que i atteint la valeur 5, mais après 
# avoir affiché la valeur 5.
# 
# On suppose que tout les éléments d'un vecteur numérique sont ordonnés du plus petit au plus grand.
# On veut sélectionner seulement les éléments inférieurs ou égaux à 20 en utilisant break.

 
break_function <- function(x){
  res <- c()
  for (i in x){
    if (i>20)
      break
    res <- c(res, i)
  }
  res
}

While.R :
# Nous vous donnons la fonction variation() qui donne
# l'augmentation ou la diminution du prix d'une action au fil du temps.
# Le prix d'origine de l'action est de 50€. 
# Nous souhaitons la vendre dès que son prix dépasse 60€ pour empocher les gains
# ou descend sous les 40€ pour limiter les pertes. 
# Ecrivez une fonction qui retourne le nombre de jours où l'on garde l'action.

# Conseil #1 : N'oubliez pas que pour passer une fonction en argument on peut juste
# donner son nom sans parenthèses, mais que pour l'utiliser il faut mettre des 
# parenthèses à la fin.

nombre_jours <- function(variation){
  jour <- 1
  prix <- 50
  
  while ((prix <= 60) && (prix >=40))
    {
    jour <- jour + 1
    prix <- prix + variation()
  }
  jour
}