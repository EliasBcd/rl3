
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R est un logiciel libre livré sans AUCUNE GARANTIE.
Vous pouvez le redistribuer sous certaines conditions.
Tapez 'license()' ou 'licence()' pour plus de détails.

R est un projet collaboratif avec de nombreux contributeurs.
Tapez 'contributors()' pour plus d'information et
'citation()' pour la façon de le citer dans les publications.

Tapez 'demo()' pour des démonstrations, 'help()' pour l'aide
en ligne ou 'help.start()' pour obtenir l'aide au format HTML.
Tapez 'q()' pour quitter R.

[R.app GUI 1.79 (8095) x86_64-apple-darwin17.0]

[Espace de Travail restauré depuis /Users/imenetalbi/.RData]
[Historique recherché depuis /Users/imenetalbi/.Rapp.history]

> install.packages('swirl')
--- SVP sélectionnez un miroir CRAN pour cette session ---
essai de l'URL 'https://cran.irsn.fr/bin/macosx/contrib/4.2/swirl_2.4.5.tgz'
Content type 'application/x-gzip' length 348108 bytes (339 KB)
==================================================
downloaded 339 KB


Les packages binaires téléchargés sont dans
	/var/folders/lw/c_gmshvs7s52n371l5ptn9_m0000gn/T//RtmpVm1nFA/downloaded_packages
> library(swirl)

| Hello! Je vois que tu as enregistré certaines variables dans ton espace de travail. Pour que tout se
| passe bien, je te recommande de faire le ménage avant de lancer Swirl.

| Tape ls() pour voir la liste de tes variables dans ton espace de travail. Ensuite, tape
| rm(list=ls()) pour nettoyer ton espace de travail.

| Tape swirl() quand tu es prêt(e) à te lancer.

> install_course_github("EliasBcd", "InitiationR")
Downloading: 84 kB     
> Downloading: 84 kB 
Erreur : symbole inattendu dans "Downloading: 84 kB"
> nstall_course_github("EliasBcd", "InitiationR")
Erreur dans nstall_course_github("EliasBcd", "InitiationR") : 
  impossible de trouver la fonction "nstall_course_github"
> install_course_github("EliasBcd", "InitiationR")
Downloading: 84 kB     Message d'avis :
Dans file.rename(file.path(swirl_courses_dir(), old_name), file.path(swirl_courses_dir(),  :
  impossible de renommer le fichier '/Library/Frameworks/R.framework/Versions/4.2/Resources/library/swirl/Courses/EliasBcd-InitiationR-a2e8ffa' en '/Library/Frameworks/R.framework/Versions/4.2/Resources/library/swirl/Courses/InitiationR', à cause de 'Directory not empty'
essage d'avis :
> swirl()

| Bienvenue sur Swirl ! Connecte-toi. Si ce n'est pas ta première connexion, indique ton nom utilisé
| précédemment. Si tu dois encore choisir ton nom, fais preuve d'un peu d'originalité !

Comment dois-je t'appeler ? khawla

| Merci, khawla. Quelques instructions de base avant d'attaquer la première leçon. Tout d'abord, si tu
| vois s'afficher '...', cela veut dire que tu dois appuyer sur Entrée quand tu as fini de lire et es
| prêt(e) à continuer.

...  <-- That's your cue to press Enter to continue

| Et quand tu vois 'Réponse:', le prompt R (>), ou si tu es invité(e) à sélectionner une option, c'est
| à toi de taper ta réponse et d'appuyer sur Entrée pour continuer.

Select 1, 2, or 3 and press Enter 

1: Continuer.
2: Avancer.
3: C'est parti !

Sélection : 1

| You can exit swirl and return to the R prompt (>) at any time by pressing the Esc key. If you are
| already at the prompt, type bye() to exit and save your progress. When you exit properly, you'll see
| a short message letting you know you've done so.

| Quand tu es arrivé(e) au prompt R (>):
| -- Tape skip() pour sauter la question.
| -- Tape play() pour expérimenter et jouer avec R; Swirl en fera abstraction...
| -- JUSQU'A ce que tu tapes nxt() pour regagner l'attention de Swirl.
| -- Tape bye() pour quitter Swirl. Ta progression sera sauvegardée.
| -- Tape main() pour retourner au menu principal de Swirl.
| -- Tape info() pour montrer les options une nouvelle fois.

| C'est parti !

...

| Choisis un cours ou tape 0 pour quitter Swirl.

1: EliasBcd-InitiationR-a2e8ffa
2: InitiationR
3: Montre-moi le répertoire des cours Swirl !

Sélection : 2

| Choisis une leçon ou tape 0 pour retourner au menu principal.

 1: Manipulations simples           2: Assignations et objets       
 3: Types                           4: Vecteurs                     
 5: Fichiers et espace de travail   6: Logique                      
 7: Valeurs manquantes              8: Vecteurs numériques          
 9: Dataframes                     10: Scripts et fonctions         
11: Control Flow                   12: Representations graphiques   


Sélection : 7

| Attempting to load lesson dependencies...

| Le paquet ‘base64enc’ a été chargé correctement !
  |                                                                                             |   0%

| Les valeurs manquantes jouent un rôle important en statistiques et en analyse de données. Il arrive
| que les valeurs manquantes ne doivent pas être ignorée, mais au contraire étudiez avec attention.

...
  |====                                                                                         |   5%
| Dans R, les valeurs manquantes sont représentées par la valeur NA (not available en anglais). Dans
| d'autres langages, cela peut être missing plutôt. Dans cette leçon, nous allons voir comment traiter
| les valeurs manquantes.

...
  |=========                                                                                    |  10%
| N'importe quelle opération dans laquelle NA existe abouti à un résultat NA. Pour illustrer cela,
| créez le vecteur c(44, NA, 5, NA) et assigné le à l'objet x.

> x <- c(44, NA, 5, NA)

| Tu es extraordinaire !
  |=============                                                                                |  14%
| Multiplions x par 3.

> x*3
[1] 132  NA  15  NA

| That's the answer I was looking for.
  |==================                                                                           |  19%
| Remarquez que dans le résultat affiché, les valeurs NA correspondent aux valeurs où x est lui-même
| NA.

...
  |======================                                                                       |  24%
| Afin de rendre le problème un peu plus intéressant, nous allons créer un vecteur contenant 1000
| tirages issue d'une distribution normale centrée réduite et les assigner à l'objet y. Utilisez pour
| cela la commande y <- rnorm(1000).

> y <- rnorm(1000)

| Excellent travail !
  |===========================                                                                  |  29%
| Créons maintenant un vecteur contenant 1000 NA avec z <- rep(NA, 1000).

> z <- rep(NA, 1000)

| Bon boulot !
  |===============================                                                              |  33%
| Enfin, sélectionnons 100 valeurs provenant des vecteurs y et z au hasard, afin de ne pas savoir
| combien il y a d'élément manquants dans le vecteur final, ni leur position. Pour cela, on utilise la
| commande data <- sample(c(y, z), 100)

> data <- sample(c(y, z), 100)

| Excellent travail !
  |===================================                                                          |  38%
| Commençons par identiifer où se trouve nos NA dans les données. La commande is.na() nous dit si
| chaque élément d'un vecteur est NA. Utilisez is.na() sur data et assignez le résultat à my_na.

> my_na <- is.na(data)

| Excellent travail !
  |========================================                                                     |  43%
| Affichez maintenant my_na.

> my_na
  [1] FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE
 [17] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE
 [33] FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE  TRUE FALSE
 [49] FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE
 [65] FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE
 [81]  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE
 [97]  TRUE  TRUE FALSE  TRUE

| That's the answer I was looking for.
  |============================================                                                 |  48%
| À chaque fois que vous voyez TRUE, vous savez que l'élément correspondant dans data est une NA. À
| l'inverse, quand vous voyez FALSE, l'élément correspond est un des nombre issu du tirage aléatoire.

...
  |=================================================                                            |  52%
| Dans la leçon sur les opérateurs logiques, nous avons vu l'opérateur égalité `==`. Il test l'égalité
| entre deux objets. On peut penser que data == NA aboutira au même résultat que is.na(). Essayez pour
| voir !

> data == na
Erreur : objet 'na' introuvable
> data == NA
  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [33] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [65] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [97] NA NA NA NA

| Bravo!
  |=====================================================                                        |  57%
| Le résultat est un vecteur contenant uniquement des NA. L'explication pour cela est assez simple. NA
| n'est pas une valeur en soi, mais un symbole qui indique l'absence de valeur. L'opération logique
| paraît donc incomplète à R. On lui demande de comparer une valeur inexistance avec un vecteur de
| valeurs. Il ne peut que retourner l'absence de valeur.

...
  |==========================================================                                   |  62%
| Les NA peuvent être déroutante au début. Ne vous inquiétez pas si tout n'est pas très clair. Le
| point important à retenir que quand vous êtes face à des valeurs manquantes (NA), soyez prudent,
| cela peut vous donner des résultats inattendus.

...
  |==============================================================                               |  67%
| Fin de la parenthèse. Nous avons un vecteur, my_na, qui prend comme valeur TRUE pour chaque NA dans
| les données et FALSE pour toutes les valeurs numériques. Nous pouvons calculer le nombre de NA dans
| notre vecteur de données data.

...
  |==================================================================                           |  71%
| Il y a une astuce qui va nous faire gagner du temps. R traîte les FALSE comme des 0 et les TRUE
| comme des 1. Il nous suffit donc de calculer la somme totale du vecteur my_na pour connaître le
| nombre de valeurs NA.

...
  |=======================================================================                      |  76%
| Essayons. Utilisez la commande sum() sur le vecteur my_na pour compter le nombre total de TRUE dans
| my_na, et donc le nombre total de NA dans data. Seul le résultat nous intéresse.

> sum(my_na)
[1] 46

| C'est la bonne réponse !
  |===========================================================================                  |  81%
| Pratique, n'est-ce pas ? Enfin, pour vous convaincre que tout fonctionne bien, regardons les
| données. Affichez data dans la console.

> data
  [1] -0.94624296  0.46487873 -0.38827198 -0.46652500          NA          NA  0.48798081          NA
  [9]  2.17440996          NA -0.52225189  0.64819954  0.01123963 -0.08477494          NA  0.78768376
 [17]  0.08453054 -0.34032734 -0.86002536 -0.98241737 -1.09039585 -0.59568884          NA          NA
 [25]          NA          NA  0.14551992 -0.56643688  1.22674261 -0.38564146          NA          NA
 [33] -0.64394995  2.56179308          NA -1.25119646 -0.68282153  0.04518284          NA          NA
 [41]          NA          NA  1.43777612          NA -0.39844664          NA          NA  0.46151160
 [49] -0.16370044          NA -1.24325841          NA          NA  0.65673788 -0.87918457          NA
 [57]  0.17469520          NA          NA -0.53527477          NA          NA -0.22915300          NA
 [65]  0.56835093  1.57299400          NA          NA          NA          NA          NA -0.48447359
 [73] -0.54797194          NA  0.64072690          NA  0.40181635  1.34039067          NA -0.34437381
 [81]          NA -0.95050449          NA          NA -1.24690426  0.84463983          NA -1.59302332
 [89]  0.28485999          NA -0.15687928          NA -0.33015216  1.14366651  0.63097441          NA
 [97]          NA          NA  1.10180863          NA

| Quelle maîtrise !
  |================================================================================             |  86%
| Il existe un second type de valeurs manquates, NaN (de l'anglais 'not a number'. Pour créer un NaN,
| essayez de diviser 0 par 0.

> 0/0
[1] NaN

| C'est du bon boulot !
  |====================================================================================         |  90%
| Une deuxième façon de créer des NaN. R a un symbole pour l'infini mathématiques, Inf. Que se
| passe-t-il si on soustrait Inf de Inf ?

> Inf - Inf
[1] NaN

| Continue comme ça !
  |=========================================================================================    |  95%
| Les NaN sont, vous l'aurez compris, un peu différent des NA. Ils ne nous indiquent pas l'absence de
| valeur général, mais le fait que le résultat de l'opération demandée n'est pas un nombre (une
| division par 0) et ne peut donc être calculé au sens classique du terme.

...
  |=============================================================================================| 100%
| Souhaitez-vous soumettre votre progression sur Moodle à votre enseignant (cela ne fonctionnera que
| pour les étudiants de l'université Paris 8) ? Si vous ne le faites pas maintenant, vous pourrez
| toujours lui envoyer le fichier 'Valeurs_manquantes.txt' qui a été créé plus tard.

1: Oui
2: Non

Sélection : 1

| Bien tenté, mais ce n'est pas exactement ce que j'espérais. Essaie à nouveau.

| Cela soumettra votre avancée dans le cours.

1: Oui
2: Non

Sélection : 2

| Quel talent !

| Tu es arrivé(e) au bout de cette leçon! Retour au menu principal...

| Choisis un cours ou tape 0 pour quitter Swirl.

1: EliasBcd-InitiationR-a2e8ffa
2: InitiationR
3: Montre-moi le répertoire des cours Swirl !

Sélection : 2

| Choisis une leçon ou tape 0 pour retourner au menu principal.

 1: Manipulations simples           2: Assignations et objets       
 3: Types                           4: Vecteurs                     
 5: Fichiers et espace de travail   6: Logique                      
 7: Valeurs manquantes              8: Vecteurs numériques          
 9: Dataframes                     10: Scripts et fonctions         
11: Control Flow                   12: Representations graphiques   


Sélection : 8

| Attempting to load lesson dependencies...

| Le paquet ‘base64enc’ a été chargé correctement !
  |                                                                                             |   0%

| Nous allons maintenant étudier la création de vecteurs numériques.

...
  |====                                                                                         |   4%
| La manière la plus simple de créer un vecteur numérique dans R est d'utiliser la commande `:`. Tapez
| 1:20 pour voir comment elle fonctionne.

> 1:20
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| Excellent travail !
  |========                                                                                     |   9%
| Nous avons crée un vecteur contenant (et incluant)tous les entiers entre 1 et 20. La commande
| fonctionne aussi avec des nombres réels. Essayez par exemple pi:10.

> pi:10
[1] 3.141593 4.141593 5.141593 6.141593 7.141593 8.141593 9.141593

| Dans le mille ! Bien joué !
  |============                                                                                 |  13%
| Le résultat est un vecteur de nombre réels commençant à pi (3.142...) et croissant par incrément de
| 1. La limite haute 10 n'est jamais atteinte, puisque le prochain nombre dans la séquence serait
| strictement supérieur à 10.

...
  |================                                                                             |  17%
| Que se passe-t-il si nous tapons 15:1 ? Essayez pour voir.

> 15:1
 [1] 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1

| Your dedication is inspiring!
  |====================                                                                         |  22%
| R utilise un incrément de -1 ! Ce comportement est parfois utile, gardez-le en tête.

...
  |========================                                                                     |  26%
| Pour accéder à l'aide sur une commande, vous pouvez utiliser un point d'interrogation suivi du nom
| de la commande. Il y a une exception néanmoins, le cas d'un opérateur tel que :. Il est nécessaire
| de mettre l'opérateur entre guillemets, comme ceci : ?':'.

...
  |============================                                                                 |  30%
| Essayez d'obtenir la documentation pour : maintenant.

> maintenant
Erreur : objet 'maintenant' introuvable
> ?':'
démarrage du serveur d'aide httpd ... fini

| C'est tout à fait ça !
  |================================                                                             |  35%
| Il est parfois utile d'avoir plus de contrôle sur la création de vecteurs numériques que permis par
| l'opérateur :. La fonction seq() sert exactement à cela.

...
  |====================================                                                         |  39%
| Dans sa forme la plus simple, seq() remplit exactement le même rôle que `:`. Essayez seq(1, 20).

> seq(1,20)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| Bon boulot !
  |========================================                                                     |  43%
| Nous avons le même résultat qu'avec 1:20, peu intéressant... Imaginons maintenant que vous souhaitez
| créer un vecteur de nombre allant de 0 à 10 par incrément de 0.5. seq(0, 10, by=0.5) fait exactement
| cela. Essayez !

> seq(0, 10, by=0.5)
 [1]  0.0  0.5  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0  7.5  8.0  8.5  9.0
[20]  9.5 10.0

| Your dedication is inspiring!
  |============================================                                                 |  48%
| Parfois, ce n'est pas l'incrément qui compte, mais d'obtenir un vecteur avec une longueur donnée,
| par exemple, 30 nombres entre 5 et 10. seq(5, 10, length=30) sert exactement à cela. Essayez et
| stockez le résultat dans un nouvel objet appelé ma_seq.

> seq(5, 10, length=30)
 [1]  5.000000  5.172414  5.344828  5.517241  5.689655  5.862069  6.034483  6.206897  6.379310
[10]  6.551724  6.724138  6.896552  7.068966  7.241379  7.413793  7.586207  7.758621  7.931034
[19]  8.103448  8.275862  8.448276  8.620690  8.793103  8.965517  9.137931  9.310345  9.482759
[28]  9.655172  9.827586 10.000000

| Bien tenté, mais ce n'est pas exactement ce que j'espérais. Essaie à nouveau. ou tape info() pour
| plus d'options.

| Vous utilisez exactement la même commande que tout à l'heure, mais avec des arguments différent.
| Sauvegardez bien le résultat dans un nouvel objet ma_seq, comme ceci ma_seq <- seq(5, 10,
| length=30).

> ma_seq <- seq(5, 10, length=30)

| Bon boulot !
  |=================================================                                            |  52%
| La fonction length() permet de connaître la longueur d'un objet dans R. Essayez-la sur le vecteur
| ma_seq pour vérifier qu'il contient bien 30 éléments.

> seq_along(ma_seq
+ seq_along(ma_seq)
Erreur : symbole inattendu dans :
"seq_along(ma_seq
seq_along"
> seq_along(ma_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30

| Ce n'est pas la bonne réponse, mais cherche encore. ou tape info() pour plus d'options.

| Utilisez length(ma_seq) pour afficher la longueur du vecteur ma_seq.

> length(ma_seq)
[1] 30

| Excellent travail !
  |=====================================================                                        |  57%
| Imaginons que nous ne connaissions pas la longueur de ma_seq, mais que nous voulons générer un
| vecteur de même longueur que le vecteur ma_seq et contenant les N premiers entiers. Autrement nous
| voulons générer un vecteur (1, 2, 3, ... N) ou N est la longueur de ma_seq.

...
  |=========================================================                                    |  61%
| Il y a plusieurs manière de faire pour aboutir à ce résultat. La première est de combiner
| l'opérateur : et la fonction length(), comme ceci : 1:length(ma_seq). Essayez.

> 1:length(ma_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30

| Bon boulot !
  |=============================================================                                |  65%
| Il est aussi possible d'utiliser une autre option de la fonction seq(), along.with, comme ceci :
| seq(along.with = ma_seq). L'argument along.with dit à R que vous voulez un vecteur de même longeur
| que ma_seq. Essayez.

> seq(along.with = ma_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30

| Dans le mille ! Bien joué !
  |=================================================================                            |  70%
| Mieux encore, comme pour beaucoup de tâches courantes, R dispose d'une commande spécifique, la
| fonction seq_along(). Tapez seq_along(ma_seq) pour la voir en action.

> seq_along(ma_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30

| That's the answer I was looking for.
  |=====================================================================                        |  74%
| Il y a souvent plusieurs manières de résoudre le même problème dans R. Les approches simples qui
| requièrent le moins de lignes de code sont généralement les meilleures. Il est aussi important que
| votre code soit lisible pour que d'autres puissent le lire.

...
  |=========================================================================                    |  78%
| Si R dispose d'une fonction spécifique pour la tâche que vous souhaitez accomplir, c'est
| généralement votre meilleure option. Vous allez apprendre à créer vos propres fonctions quand vous
| ne trouverez pas ce qu'il vous faut dans R. Nous allons en explorer l'écriture dans une prochaine
| leçon.

...
  |=============================================================================                |  83%
| Une dernière fonction qui peut être utile pour créer des vecteurs numériques est la fonction rep()
| (abréviation de "replicate" en anglais). Nous allons examiner quelques possibilités offertes par
| cette fonction.

...
  |=================================================================================            |  87%
| Si nous voulons créer un vecteur contenant 40 zéros, nous pouvons le faire à l'aide de la commande
| rep(0, times = 40). Essayez.

> rep(0, times = 40)
 [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

| Keep working like that and you'll get there!
  |=====================================================================================        |  91%
| Une autre utilisation de la fonction rep() est pour créer un vecteur contenant 10 répétition du
| vecteur (0, 1, 2). Pour cela, tapez rep(c(0, 1, 2), times = 10).

> rep(c(0, 1, 2), times= 10)
 [1] 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2

| That's the answer I was looking for.
  |=========================================================================================    |  96%
| Enfin, imaginons que plutôt que de répéter le vecteur (0, 1, 2) 10 fois, nous voulons un vecteur qui
| contiennent 10 zéros, puis 10 un, puis 10 deux. R nous permet de faire ça à l'aide de l'argument
| each de la fonction rep(). Essayez rep(c(0, 1, 2), each = 10).

> rep(c(0, 1, 2), each = 10)
 [1] 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2

| Tu es extraordinaire !
  |=============================================================================================| 100%
| Souhaitez-vous soumettre votre progression sur Moodle à votre enseignant (cela ne fonctionnera que
| pour les étudiants de l'université Paris 8) ? Si vous ne le faites pas maintenant, vous pourrez
| toujours lui envoyer le fichier 'Vecteurs_numeriques.txt' qui a été créé plus tard.

1: Oui
2: Non

Sélection : 2

| Continue comme ça !

| Tu es arrivé(e) au bout de cette leçon! Retour au menu principal...

| Choisis un cours ou tape 0 pour quitter Swirl.

1: EliasBcd-InitiationR-a2e8ffa
2: InitiationR
3: Montre-moi le répertoire des cours Swirl !

Sélection : 2

| Choisis une leçon ou tape 0 pour retourner au menu principal.

 1: Manipulations simples           2: Assignations et objets       
 3: Types                           4: Vecteurs                     
 5: Fichiers et espace de travail   6: Logique                      
 7: Valeurs manquantes              8: Vecteurs numériques          
 9: Dataframes                     10: Scripts et fonctions         
11: Control Flow                   12: Representations graphiques   


Sélection : 9

| Attempting to load lesson dependencies...

| Le paquet ‘base64enc’ a été chargé correctement !
  |                                                                                             |   0%

| Nous avons vu comment créer des vecteurs contenant différentes valeurs, et différent types de
| valeurs. Il est parfois utile de les regrouper en une seule base de données. C'est à cela que nous
| servirons les dataframes.

...
  |====                                                                                         |   5%
| Nous avons vu que nous pouvons créer un vecteur à l'aide de la commande c(). Reprenez le vecteur
| contenant les tailles de la leçon précédente. Pour mémoire, nous souhaitons créer le vecteur
| contenant les tailles 156, 164, 197, 147 et 173 (dans cet ordre). Stockez le résultat dans l'objet
| tailles.

> c(156, 164, 197, 147, 173)
[1] 156 164 197 147 173

| One more time. You can do it! ou tape info() pour plus d'options.

| Tapez tailles <- c(156, 164, 197, 147, 173) et appuyez sur entrée.

> tailles <- c(156, 164, 197, 147, 173)

| Your dedication is inspiring!
  |=========                                                                                    |  10%
| Recréons maintenant le vecteur poids de la leçon sur les vecteurs. Pour mémoire, nous souhaitons
| créer le vecteur contenant les poids 45, 59, 110, 44 et 88 (dans cet ordre). Stockez le résultat
| dans l'objet poids.

> poids <- c(45, 59, 110, 44, 88)

| Excellent travail !
  |=============                                                                                |  14%
| Nous avons maintenant nos deux vecteurs de données, mais ils ne sont pas vraiment liés entre eux.
| Nous savons que la première taille correspond au premier poids, la seconde au second, etc. Nous
| pouvons même créer un vecteur de noms associés.

...
  |==================                                                                           |  19%
| Attribuons des noms à ces poids et tailles maintenant. Disons que ce sont les caractéristiques de
| Jeanne, Mohammed, Bassirou, Leila et Zoé. On peut créer un vecteur noms contenant ces noms (sans
| oublier les accents). Faites-le maintenant.

> noms <- c("Jeanne", "Mohammed", "Bassirou", "Leila", "Zoé")

| C'est la bonne réponse !
  |======================                                                                       |  24%
| Nous n'avons toujours pas liés nos données. Il n'est pas simple de trouver le poids et la taille de
| Bassirou par exemple. Pour simplifier cela, R possède un type, le data.frame, qui regroupe les
| données sous forme de tableaux.

...
  |===========================                                                                  |  29%
| Il est possible de donner des noms aux lignes, ou pas. Ici, il est pratique pour nous d'attribuer le
| nom des personnes aux lignes, mais cela ne sera pas toujours le cas. La commande pour regrouper les
| données dans un tableau est data.frame. Pour ce que nous souhaitons faire, il faut taper
| data.frame(tailles, poids, row.names=noms). Nous souhaitons de plus stocker le dataframe dans
| l'objet data.

> data
  [1] -0.94624296  0.46487873 -0.38827198 -0.46652500          NA          NA  0.48798081          NA
  [9]  2.17440996          NA -0.52225189  0.64819954  0.01123963 -0.08477494          NA  0.78768376
 [17]  0.08453054 -0.34032734 -0.86002536 -0.98241737 -1.09039585 -0.59568884          NA          NA
 [25]          NA          NA  0.14551992 -0.56643688  1.22674261 -0.38564146          NA          NA
 [33] -0.64394995  2.56179308          NA -1.25119646 -0.68282153  0.04518284          NA          NA
 [41]          NA          NA  1.43777612          NA -0.39844664          NA          NA  0.46151160
 [49] -0.16370044          NA -1.24325841          NA          NA  0.65673788 -0.87918457          NA
 [57]  0.17469520          NA          NA -0.53527477          NA          NA -0.22915300          NA
 [65]  0.56835093  1.57299400          NA          NA          NA          NA          NA -0.48447359
 [73] -0.54797194          NA  0.64072690          NA  0.40181635  1.34039067          NA -0.34437381
 [81]          NA -0.95050449          NA          NA -1.24690426  0.84463983          NA -1.59302332
 [89]  0.28485999          NA -0.15687928          NA -0.33015216  1.14366651  0.63097441          NA
 [97]          NA          NA  1.10180863          NA

| Ce n'est pas tout à fait ce que je cherche. Essaie encore. ou tape info() pour plus d'options.

| N'oubliez pas d'attribuer le dataframe à l'objet data.

> data <- data.frame(tailles, poids, row.names=noms)

| Keep working like that and you'll get there!
  |===============================                                                              |  33%
| Tapons maintenant data pour observer comment R a stocké nos données.

> data
         tailles poids
Jeanne       156    45
Mohammed     164    59
Bassirou     197   110
Leila        147    44
Zoé          173    88

| All that practice is paying off!
  |===================================                                                          |  38%
| R a stocké tout data dans un seul tableau. Il a automatiquement donné comme nom de colonnes le noms
| des objets utilisés pour construire le dataframe. Vous remarquerez aussi que les noms ne sont pas
| précédés d'un nom de colonne. C'est parce que c'est l'unique colonne de noms de lignes.

...
  |========================================                                                     |  43%
| Si on veut accéder à une colonne de ce tableau, il y a plusieurs méthodes. La première consiste à
| utiliser le nom du dataframe, suivi du signe $ suivi du nom de la colonne. Essayez de voir les
| tailles.

> data$tailles
[1] 156 164 197 147 173

| Excellent travail !
  |============================================                                                 |  48%
| La deuxième permet de consulter n'importe quelle colonne à l'aide d'un indice, un peu comme on
| consulterait un élément d'un vecteur. Si on souhaite voir la colonne numéro 2 du dataframe, on
| tapera data[2]. Essayez pour voir !

> data[2]
         poids
Jeanne      45
Mohammed    59
Bassirou   110
Leila       44
Zoé         88

| Dans le mille ! Bien joué !
  |=================================================                                            |  52%
| Enfin, une dernière méthode utile est d'utiliser le nom des colonnes entre des crochets, plutôt que
| d'utiliser le signe $. La méthode d'accès est similaire à la précédente, sauf qu'au lieu d'utiliser
| l'indice de la colonne, il faut utiliser son nom. Essayez pour voir si vous avez compris.

> data["poids"]
         poids
Jeanne      45
Mohammed    59
Bassirou   110
Leila       44
Zoé         88

| Your dedication is inspiring!
  |=====================================================                                        |  57%
| Vous verrez qu'à l'usage, il est souvent plus facile d'utiliser le nom de la colonne pour la
| consulter. La raison est simple, vous ne saurez pas toujours dans quel ordre R ordonné les colonnes
| et vous allez parfois ajouter ou supprimer des colonnes à vos dataframes. Il est beaucoup plus
| simple de se rappeler du nom d'une colonne plutôt que de son numéro, surtout si celui-ci peut
| changer. La méthode avec le $ ne permet de consulter qu'une seule colonne à la fois. La troisième
| méthode permet au contraire de consulter plusieurs colonnes simultanément, en mettant tous les noms
| des colonnes dans un vecteur.

...
  |==========================================================                                   |  62%
| Tout comme les colonnes, il y a plusieurs méthodes pour consulter une ou plusieurs lignes. La plus
| simple est d'utiliser un numéro de ligne. La syntaxe est un peu différente des colonnes. En effet,
| en pratique R considère les dataframes comme des matrices (objets que nous n'avons pas étudiés),
| c'est à dire que chaque cellule du tableau est indexé par un numéro de ligne et un numéro de
| colonne. La ligne est donné par le premier indice, alors que la colonne est donné par le deuxième
| indice. Si on veut consulter la deuxième ligne par exemple, on doit entre data[2, ]. Essayez pour
| voir !

> data[2, ]
         tailles poids
Mohammed     164    59

| Keep working like that and you'll get there!
  |==============================================================                               |  67%
| La virgule suivi de rien indique à R que nous souhaitons consulter toutes les colonnes associées à
| la deuxième ligne. Si maintenant nous souhaitons seulement consulter la première colonne de la
| deuxième ligne, essayez de deviner comment faire.

> data[2,1]
[1] 164

| Perseverance, that's the answer.
  |==================================================================                           |  71%
| Nous avons donné des noms au lignes précédemment. Il serait dommage de ne pas les utiliser. Si
| maintenant on veut retrouver les caractéristiques de Bassirou, on peut utiliser le nom de la ligne,
| comme nous avons utiliser le nom de la colonne. Essayez pour voir si vous avez compris.

> data[2,1]
[1] 164

| Tente encore une fois. ou tape info() pour plus d'options.

| Rappelez-vous de bien mettre des guillemets autour des noms et que vous voulez consulter toutes les
| colonnes !

> c
function (...)  .Primitive("c")

| Pas exactement. Retente ta chance. ou tape info() pour plus d'options.

| Rappelez-vous de bien mettre des guillemets autour des noms et que vous voulez consulter toutes les
| colonnes !

> data$imc <- data$poids / (data$tailles / 100)^2

| Pas tout à fait ! Essaie à nouveau. ou tape info() pour plus d'options.

| Rappelez-vous de bien mettre des guillemets autour des noms et que vous voulez consulter toutes les
| colonnes !

> c
function (...)  .Primitive("c")

| Tente encore une fois. ou tape info() pour plus d'options.

| Rappelez-vous de bien mettre des guillemets autour des noms et que vous voulez consulter toutes les
| colonnes !

> info()

| Quand tu es arrivé(e) au prompt R (>):
| -- Tape skip() pour sauter la question.
| -- Tape play() pour expérimenter et jouer avec R; Swirl en fera abstraction...
| -- JUSQU'A ce que tu tapes nxt() pour regagner l'attention de Swirl.
| -- Tape bye() pour quitter Swirl. Ta progression sera sauvegardée.
| -- Tape main() pour retourner au menu principal de Swirl.
| -- Tape info() pour montrer les options une nouvelle fois.

> c("Bassirou")
[1] "Bassirou"

| Tu y es presque. Essaie encore. ou tape info() pour plus d'options.

| Rappelez-vous de bien mettre des guillemets autour des noms et que vous voulez consulter toutes les
| colonnes !

> skip()

| J'affiche la bonne réponse pour toi...

> data["Bassirou", ]
         tailles poids
Bassirou     197   110

| That's the answer I was looking for.
  |=======================================================================                      |  76%
| Il est bien sûr possible d'ajouter des colonnes à un dataframe après sa création. Si par exemple
| nous voulons ajouter la colonne imc à ce dataframe et refaire le calcul fait auparavant, il faut
| utiliser la syntaxe data$imc <- data$poids / (data$tailles / 100)^2. Les règles de calculs sur les
| lignes ou les colonnes de dataframe sont identiques à celle des vecteurs. On peut aussi appeler les
| colonnes avec des guillemets et des crochets, mais ce n'est pas très utile ici.

> data$imc <- data$poids / (data$tailles / 100)^2

| Tu assures !
  |===========================================================================                  |  81%
| Observez maitenant data.

> data
         tailles poids      imc
Jeanne       156    45 18.49112
Mohammed     164    59 21.93635
Bassirou     197   110 28.34394
Leila        147    44 20.36189
Zoé          173    88 29.40292

| Quel talent !
  |================================================================================             |  86%
| Remarquez que R a créé une nouvelle colonne, imc, qui est le résultat du calcul que nous lui avons
| demandé.

...
  |====================================================================================         |  90%
| Il pourrait être intéressant de faire quelques statistiques sur les données que nous avons. Utilisez
| la fonction summary() de R surdata pour obtenir un résumé des caractéristiques de notre échantillon.

> summary(data)
    tailles          poids            imc       
 Min.   :147.0   Min.   : 44.0   Min.   :18.49  
 1st Qu.:156.0   1st Qu.: 45.0   1st Qu.:20.36  
 Median :164.0   Median : 59.0   Median :21.94  
 Mean   :167.4   Mean   : 69.2   Mean   :23.71  
 3rd Qu.:173.0   3rd Qu.: 88.0   3rd Qu.:28.34  
 Max.   :197.0   Max.   :110.0   Max.   :29.40  

| Continue comme ça !
  |=========================================================================================    |  95%
| Ce sera tout sur cette leçon. Vous savez maintenant l'essentiel des principaux types que vous allez
| rencontrer dans R.

...
  |=============================================================================================| 100%
| Souhaitez-vous soumettre votre progression sur Moodle à votre enseignant (cela ne fonctionnera que
| pour les étudiants de l'université Paris 8) ? Si vous ne le faites pas maintenant, vous pourrez
| toujours lui envoyer le fichier 'Dataframes.txt' qui a été créé plus tard.

1: Non
2: Oui

Sélection : 