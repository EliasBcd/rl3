> library(swirl)

| Hi! Type swirl() when you are ready to begin.

> install_course_github('EliasBcd', 'InitiationR')
Downloading: 93 kB      
> select_language('french', append_rprofile = TRUE)
> swirl()

| Bienvenue sur Swirl ! Connecte-toi. Si ce n'est pas ta première connexion,
| indique ton nom utilisé précédemment. Si tu dois encore choisir ton nom,
| fais preuve d'un peu d'originalité !

Comment dois-je t'appeler ? Nivediha

| Merci, Nivediha. Quelques instructions de base avant d'attaquer la
| première leçon. Tout d'abord, si tu vois s'afficher '...', cela veut dire
| que tu dois appuyer sur Entrée quand tu as fini de lire et es prêt(e) à
| continuer.

...  <-- That's your cue to press Enter to continue

| Et quand tu vois 'Réponse:', le prompt R (>), ou si tu es invité(e) à
| sélectionner une option, c'est à toi de taper ta réponse et d'appuyer sur
| Entrée pour continuer.

Select 1, 2, or 3 and press Enter 

1: Continuer.
2: Avancer.
3: C'est parti !

Selection: 1

| You can exit swirl and return to the R prompt (>) at any time by pressing
| the Esc key. If you are already at the prompt, type bye() to exit and save
| your progress. When you exit properly, you'll see a short message letting
| you know you've done so.

| Quand tu es arrivé(e) au prompt R (>):
| -- Tape skip() pour sauter la question.
| -- Tape play() pour expérimenter et jouer avec R; Swirl en fera
| abstraction...
| -- JUSQU'A ce que tu tapes nxt() pour regagner l'attention de Swirl.
| -- Tape bye() pour quitter Swirl. Ta progression sera sauvegardée.
| -- Tape main() pour retourner au menu principal de Swirl.
| -- Tape info() pour montrer les options une nouvelle fois.

| C'est parti !

...

| Choisis un cours ou tape 0 pour quitter Swirl.

1: InitiationR
2: Montre-moi le répertoire des cours Swirl !

Selection: 1

| Choisis une leçon ou tape 0 pour retourner au menu principal.

 1: Manipulations simples           2: Assignations et objets       
 3: Types                           4: Vecteurs                     
 5: Fichiers et espace de travail   6: Logique                      
 7: Valeurs manquantes              8: Vecteurs numériques          
 9: Dataframes                     10: Scripts et fonctions         
11: Control Flow                   12: Representations graphiques   
13: Tirages aleatoires             

Selection: 13

| Attempting to load lesson dependencies...

| Cette leçon requiert le paquet ‘base64enc’ . Voudrais-tu que je l'installe
| pour toi maintenant ?

1: Oui
2: Non

Selection: 1

| Installation du paquet ‘base64enc’ maintenant...

| Le paquet ‘base64enc’ a été chargé correctement !

| Cette leçon requiert le paquet ‘ggplot2’ . Voudrais-tu que je l'installe
| pour toi maintenant ?

1: Oui
2: Non

Selection: 1

| Installation du paquet ‘ggplot2’ maintenant...
also installing the dependencies ‘colorspace’, ‘farver’, ‘labeling’, ‘munsell’, ‘RColorBrewer’, ‘viridisLite’, ‘gtable’, ‘isoband’, ‘scales’


| Le paquet ‘ggplot2’ a été chargé correctement !

  |                                                                   |   0%

| Un avantage d'utiliser R, un langage de programmation statistique, est la
| grande quantité d'outils à votre disposition pour effectuer des
| simulations et générer des nombres aléatoires.

...

  |==                                                                 |   3%
| Je ne vous expliquerai pas les différentes distributions de probabilités,
| mais vous en avez déjà vu certaines. Ici, nous les utiliserons pour
| l'échantillonage et la génération de nombres aléatoires.

...

  |====                                                               |   6%
| La première fonction que nous utiliserons pour générer des nombres
| aléatoires est sample(). Regardez l'aide sur cette fonction grâce à
| ?sample.

> ?sample

| Continue comme ça !

  |======                                                             |   9%
| Pour simuler 4 lancements d'un dé à 6 faces, on utilise la commande :
| sample(1:6, 4, replace = TRUE).

> sample(1:6, 4, replace = TRUE)
[1] 2 5 4 5

| Quelle maîtrise !

  |========                                                           |  12%
| Répetez la commande et observez que les résultats sont différents. (La
| probabilité d'obtenir exactement le même résultat est (1/6)^4 = 0.00077 !)

> sample(1:6, 4, replace = TRUE)
[1] 6 5 2 1

| Bravo!

  |==========                                                         |  15%
| sample(1:6, 4, replace = TRUE) dit à R de tirer aléatoirement 4 fois un
| nombre entre 1 et 6, AVEC remise (c'est l'argument "replace"). Le tirage
| avec remise signifie que le nombre est "remis" à chaque fois, donc il a
| encore la même chance d'être sélectionné la fois suivante. C'est bien ce
| que nous souhaitons obtenir ici, puisque chaque lancé de dé n'affecte pas
| le suivant.

...

  |============                                                       |  18%
| Tirez maintenant aléatoire 10 nombres entre 1 et 20, SANS remise. Pour ce
| faire, enlever simplement l'argument 'replace' de la fonction.

> sample(1:20, 10)
 [1] 11 20  8  2 18  1  6  5  4 12

| All that practice is paying off!

  |==============                                                     |  21%
| La commande précédente précise qu'il n'y a pas de remise. Chaque nombre de
| la séquence ne peut donc apparaître qu'une seule fois. La valeur par
| défaut de l'argument "replace" est FALSE, ce qui explique pourquoi nous
| avons du le préciser quand nous avons souhaité une remise, mais que nous
| n'avons pas eu besoin de le faire quand nous le souhaitons pas de remise.

...

  |================                                                   |  24%
| LETTERS est un objet prédéfini dans R qui contient les 26 lettres de
| l'alphabet latin en majuscule. Regardez son contenu maintenant.

> LETTERS
 [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R"
[19] "S" "T" "U" "V" "W" "X" "Y" "Z"

| Quelle maîtrise !

  |==================                                                 |  27%
| La fonction sample() permet aussi de permuter les éléments d'un vecteurs.
| Par exemple, essayez sample(LETTERS) pour permuter les 26 lettres de
| l'alphabet.

> sample(LETTERS)
 [1] "E" "Q" "N" "R" "D" "G" "P" "M" "Z" "C" "I" "K" "H" "T" "U" "W" "J" "O"
[19] "S" "F" "Y" "X" "L" "B" "A" "V"

| Excellent travail !

  |====================                                               |  30%
| Permuter, c'est exactement comme tirer aléatoirement les 26 LETTERS sans
| remise. Quand l'argument 'size' n'est pas spécifié dans sample(), R
| utilise un échantillon de la taille du vecteur à partir duquel nous
| échantillonnons, ce qui crée de fait une permutation.

...

  |======================                                             |  33%
| Supposons maintenant que nous souhaitons simuler le tirage aléatoire de
| 100 pile ou face d'une pièce biaisée. Cette pièce a une probabilité de 0.3
| d'obtenir pile et une probabilité 0.7 d'obtenir face.

...

  |========================                                           |  36%
| Supposons que 0 représente pile et 1 représente face. Utilisez sample()
| pour tirer aléatoirement un échantillon de taille 100 du vecteur c(0, 1),
| avec remise. Pour préciser que la pièce est biaisée, nous ajoutons
| l'argument prob = c(0.3, 0.7) à la fonction. Celui-ci donne les
| probabilités de chaque valeur. Assignez le résultat à un nouvel objet
| appelé flips.

> flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))

| Bon boulot !

  |==========================                                         |  39%
| Regardez le contenu de flips.

> flips
  [1] 1 0 1 1 0 1 1 1 0 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 0 1 1 1 0 1
 [37] 1 1 0 0 0 0 0 1 1 1 1 1 1 1 0 1 1 1 0 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1
 [73] 1 1 1 1 0 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1

| C'est tout à fait ça !

  |============================                                       |  42%
| Nous avons mis une probabilité de 0.7 sur face. Nous nous attendons donc à
| trouver à peu près 70 tirages qui valent 1. Comptez le nombre total de 1
| en utilisant la fonction sum().

> sum(flips)
[1] 77

| That's the answer I was looking for.

  |==============================                                     |  45%
| Un tirage à pile ou face à un résultat binaire (0 ou 1) et nous faisons
| 100 tirages indépendants. On peut donc utiliser la fonction rbinom() pour
| simuler des tirages d'une variable aléatoire binomiale. Regardez la
| documentation de rbinom() en utilisant ?rbinom.

> ?rbinom

| C'est la bonne réponse !

  |================================                                   |  48%
| Chaque distribution de probabilité dans R a une fonction r**** (r pour
| 'random'), une fonction d**** (d pour 'densité'), une fonction p**** (p
| pour 'probabilité') et une fonction q**** (q pour 'quantile'). Pour les
| simulations de tirages aléatoires, nous utilisons les fonctions r****.
| Vous pouvez explorer l'usage des autres fonctions avec l'aide.

...

  |===================================                                |  52%
| Une variable aléatoire binomiale représente le nombre de succès (face)
| pour un nombre donné d'essai indépendant (tirage à pile ou face). On peut
| générer une variable aléatoire unique qui représente le tirage à pile ou
| face de notre pièce biaisée en utilisant rbinom(1, size = 100, prob =
| 0.7). Nous n'avons besoin ici que de spécifier la probabilité de succès
| (face), pas la probabilité d'échec (pile), qui est automatiquement 1 -
| probabilité succès. Essayez.

> rbinom(1, size = 100, prob = 0.7)
[1] 75

| Excellent travail !

  |=====================================                              |  55%
| De manière équivalente, si nous voulons voir tous les 0 et 1, on peut
| demander 100 observations, chacune de taille 1 et avec une probabilité de
| succès de 0,7. Essayez en assignant le résultat à un nouvel objet flips2.

> flips2 <- rbinom(100, size = 1, prob = 0.7)

| Bravo!

  |=======================================                            |  58%
| Observez le contenu de flips2.

> flips2
  [1] 1 0 1 1 1 1 1 0 1 1 0 0 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [37] 1 0 1 0 0 0 1 1 0 1 0 0 0 0 0 1 1 0 0 1 1 1 0 0 1 1 1 1 1 0 1 1 0 1 0 0
 [73] 0 1 0 1 1 1 1 1 1 0 0 0 1 1 0 1 0 1 1 1 0 1 0 1 0 0 1 1

| Perseverance, that's the answer.

  |=========================================                          |  61%
| Utilisez maintenant sum() pour compter le nombre de 1 (face) dans flips2.
| Elle devrait être proche de 70.

> sum(flips2)
[1] 64

| Excellent travail !

  |===========================================                        |  64%
| Tout comme rbinom(), on peut utiliser R pour simuler le résultat de
| beaucoup d'autres distributions. Cherchez la documentation pour rnorm.

> rnorm
function (n, mean = 0, sd = 1) 
.Call(C_rnorm, n, mean, sd)
<bytecode: 0x561aed15be20>
<environment: namespace:stats>

| Ce n'est pas tout à fait ce que je cherche. Essaie encore. ou tape info()
| pour plus d'options.

| Tapez ?rnorm pour lire son aide.

> ?rnorm

| C'est la bonne réponse !

  |=============================================                      |  67%
| La distribution normale classique (la Gaussienne) a une moyenne de 0 et un
| écart-type de 1. Comme vous pouvez le lire dans la partie 'Usage' de la
| documentation, les valeurs par défaut des arguments 'mean' (moyenne) et
| 'sd' (écart-type) sont 0 et 1. rnorm(10) générera donc 10 nombres
| aléatoires à l'aide de la distribution Gaussienne. Essayez.

> rnorm(10)
 [1] -1.82990784  0.45972007  0.10156160  1.88925567 -0.03059768  1.40233815
 [7]  0.80623942  0.91002527 -0.52842556  1.95719646

| Continue comme ça !

  |===============================================                    |  70%
| Faites maintenant la même chose avec une moyenne de 100 et un écart-type
| de 25.

> rnorm(10,25)
 [1] 24.75572 24.04054 23.96931 25.11283 26.90235 24.95810 25.37669 24.58341
 [9] 24.13036 26.08731

| Pas tout à fait, mais continue à chercher ! ou tape info() pour plus
| d'options.

| Utilisez rnorm(10, mean = 100, sd = 25) pour générer 10 nombres aléatoires
| tiré d'une loi normale de moyenne 100 et d'écart-type 25.

> rnorm(10, mean = 100, sd = 25)
 [1]  62.18229 103.40797 134.12403 117.88113  82.87826 110.24486 130.04694
 [8]  89.81854  78.80531 119.55449

| Quelle maîtrise !

  |=================================================                  |  73%
| Enfin, nous voulons générer 100 groupes de nombres aléatoires. Chaque
| groupe contiendra 5 valeurs générées par une loi uniforme entre -1 et 1.
| Commençons par un premier groupe de 5 nombre. Je vous expliquerai par la
| suite comment répéter facilement l'opération 100 fois.

...

  |===================================================                |  76%
| Générer 5 valeurs aléatoires issues d'une distribution uniforme sur -1, 1.
| Utilisez la documentation de runif() si vous avez besoin d'aide.

> runif(5, -1, 1)
[1]  0.12707967 -0.61322053  0.49113445 -0.03527696  0.65448437

| C'est la bonne réponse !

  |=====================================================              |  79%
| Utilisez maintenant replicate(100, runif(5, -1, 1)) pour répéter
| l'opération 100 fois. Stockez le résultat dans une nouvelle variable
| mon_unif.

> replicate(100, runif(5, -1, 1))
            [,1]        [,2]       [,3]       [,4]       [,5]        [,6]
[1,] -0.94661983  0.07127473 -0.3144702  0.3222685  0.6436443 -0.08038164
[2,] -0.15919291 -0.52764662  0.1897462 -0.2739026  0.5671703  0.51481326
[3,] -0.91509506 -0.69351644  0.5369095 -0.1627029 -0.4303416 -0.12074771
[4,] -0.20400237  0.16609061 -0.3036623  0.3679300 -0.5825542 -0.59997062
[5,]  0.01640465  0.35031471  0.7094816  0.7518072 -0.3253750 -0.10946248
           [,7]       [,8]         [,9]       [,10]      [,11]       [,12]
[1,] -0.9604863  0.3662638 -0.007013197 -0.05557366 -0.6866363  0.96989947
[2,] -0.9560729  0.6816122 -0.606481007 -0.04382498  0.9976362  0.32710629
[3,]  0.6164194  0.9805140 -0.422027393 -0.72987216  0.6051370 -0.09985209
[4,] -0.4517337  0.8075094  0.165403337  0.61560473 -0.4298058 -0.46154046
[5,] -0.5176937 -0.6888398 -0.091798396  0.19458169 -0.2563219 -0.18939236
          [,13]      [,14]      [,15]       [,16]       [,17]      [,18]
[1,]  0.3030129 -0.7139539  0.3631322  0.60720306 -0.98034067  0.6765465
[2,]  0.5469566  0.4447414 -0.2731743  0.39460259  0.03906951 -0.5821840
[3,]  0.3835902 -0.6274184 -0.2592471  0.05771306  0.77308725 -0.6313526
[4,]  0.2638599 -0.2194566 -0.1997941  0.42414575  0.58257782 -0.8211454
[5,] -0.7369704  0.7170745  0.9281773 -0.31612244 -0.37315110 -0.9121089
          [,19]      [,20]      [,21]      [,22]     [,23]      [,24]
[1,] 0.93778235 -0.7690292 -0.9842651  0.8545445 0.2402432 -0.6667942
[2,] 0.48512822  0.7334626  0.7988312  0.8432460 0.9996166 -0.8833824
[3,] 0.06808205 -0.4682683  0.4264540 -0.4670837 0.1190383 -0.5988634
[4,] 0.45906013 -0.6704131 -0.1197249 -0.4306908 0.7278899 -0.3415155
[5,] 0.55333508  0.5182660 -0.6953747  0.9816579 0.9996743  0.5707790
          [,25]      [,26]      [,27]       [,28]      [,29]       [,30]
[1,] 0.70788066 -0.9456046 -0.1999952  0.62602702  0.1244740 -0.59833359
[2,] 0.96460129  0.9201157  0.4201007  0.28423668  0.5465960  0.21159314
[3,] 0.82526910  0.6480766  0.7802476 -0.15293220 -0.3896981  0.93819082
[4,] 0.07329082 -0.2753302 -0.9998158  0.03095906  0.7962494 -0.81796132
[5,] 0.26109540  0.6852748 -0.6559589  0.52975040 -0.8910317  0.09395774
           [,31]       [,32]       [,33]      [,34]      [,35]      [,36]
[1,] -0.59437132 -0.45606789  0.02631728 -0.3539126 -0.7923922 -0.8219513
[2,] -0.50144699 -0.65227086  0.27583609 -0.3419272  0.0817984  0.2797650
[3,]  0.97848225  0.52854218  0.47331384 -0.6005954  0.1920475 -0.6931821
[4,]  0.04113448 -0.07809801  0.74250178 -0.5373290 -0.6640201 -0.5867861
[5,] -0.01671604  0.75427036 -0.61464064 -0.4708874  0.8267734  0.3032516
           [,37]      [,38]       [,39]       [,40]       [,41]      [,42]
[1,]  0.85769479  0.4858359  0.83473218  0.15346381  0.02718234  0.9145848
[2,] -0.71043976  0.3842207  0.29090721  0.03396941 -0.27486722  0.6120472
[3,] -0.13071539  0.3345507  0.03675828 -0.52392961  0.92745891  0.2245805
[4,] -0.87957822 -0.6236859  0.33003659  0.16874025 -0.53441124  0.2249478
[5,] -0.09261812  0.1434458 -0.73954834  0.87982578  0.53218606 -0.9272489
          [,43]      [,44]      [,45]        [,46]     [,47]      [,48]
[1,]  0.5785575 -0.4457297 -0.9085529  0.238784804 0.5645477 -0.1604994
[2,] -0.8189463  0.5433285 -0.8036245  0.794121296 0.4856878  0.2430187
[3,] -0.6510524 -0.2138980  0.3583886  0.008353074 0.2600552  0.8293757
[4,] -0.6583723 -0.7573783 -0.1256080 -0.633373799 0.8729772 -0.3234922
[5,] -0.6629364  0.3526890 -0.5412171  0.436847853 0.3424615  0.8439902
          [,49]      [,50]      [,51]      [,52]      [,53]      [,54]
[1,] -0.2791273 -0.2047840 -0.9012098 -0.5327739 -0.5072613 -0.9130067
[2,]  0.6755858  0.5453909 -0.6348041 -0.1515572 -0.5193122 -0.2204059
[3,]  0.9646564  0.8338416  0.4742596  0.7009357 -0.7730900 -0.4307408
[4,]  0.2728114 -0.8680935 -0.4340170  0.5732709 -0.2508871 -0.9885252
[5,]  0.3122295 -0.3805548  0.7219480 -0.2547931  0.6092278  0.7839435
          [,55]      [,56]       [,57]       [,58]       [,59]      [,60]
[1,]  0.1292732  0.3065170 -0.04409192  0.61296886  0.38279210  0.5407429
[2,]  0.5332936 -0.8762605 -0.40893946 -0.87812663 -0.07370017  0.9215608
[3,] -0.5900948  0.7345457  0.43017071  0.07865282  0.99206411  0.7420203
[4,]  0.8837262 -0.4349285  0.90460632  0.98746349  0.60152349 -0.8352116
[5,] -0.3391894 -0.3718774 -0.53592852  0.76726396 -0.85522416 -0.5102432
          [,61]       [,62]       [,63]       [,64]       [,65]      [,66]
[1,]  0.8583676 -0.01798182 -0.13690117  0.06866382 -0.24581773 -0.4175269
[2,] -0.2491698 -0.06463146  0.54183171  0.05097969  0.05642689 -0.8620522
[3,] -0.1504164  0.39928135 -0.40437762  0.87215253 -0.56334658 -0.7292301
[4,] -0.2078869 -0.17559950 -0.10739288  0.10536744  0.89234282 -0.9783845
[5,] -0.1586459  0.08890958  0.02327997 -0.01517982  0.65728170  0.8753191
          [,67]      [,68]      [,69]      [,70]        [,71]      [,72]
[1,]  0.5250195  0.1560177  0.5989070 -0.6929415  0.035204481  0.7064109
[2,]  0.1188205 -0.5281485 -0.4015250 -0.4179939  0.579947286  0.8770002
[3,] -0.4154453 -0.5381772  0.9260828  0.5849056 -0.506292477  0.9433521
[4,]  0.9069565  0.3958700  0.2268403  0.9850706 -0.254407460 -0.5634985
[5,] -0.3970120 -0.4710966  0.2764240  0.0136643 -0.004359889  0.5245121
          [,73]      [,74]       [,75]      [,76]        [,77]       [,78]
[1,]  0.9352399 -0.9082451  0.79481895  0.1239296 -0.110110491 0.005476578
[2,] -0.2874712  0.9921872 -0.01116772 -0.6437187 -0.045380205 0.144154263
[3,]  0.9013088  0.7151080  0.12479288  0.2721649 -0.741350559 0.969828715
[4,] -0.4399440  0.6159425  0.54858858  0.5963775  0.006229831 0.836297249
[5,] -0.2642925  0.9449344  0.77262605 -0.6382029  0.821880569 0.478073870
          [,79]      [,80]      [,81]       [,82]      [,83]      [,84]
[1,] -0.1839790 -0.1246897  0.3261676 -0.43503951  0.7188245  0.4219712
[2,]  0.4985774 -0.7665842 -0.2518401  0.09740022  0.2590175  0.7837482
[3,] -0.7064272 -0.7555253 -0.8995057  0.39275260  0.6636239  0.6462121
[4,] -0.3289870 -0.2298310 -0.2232243  0.77590446 -0.2041849 -0.7019413
[5,] -0.6833071 -0.7292987  0.2883451  0.93400471 -0.6798509 -0.8322249
          [,85]       [,86]       [,87]      [,88]      [,89]      [,90]
[1,]  0.4662279  0.04016221  0.38785727  0.7108267 -0.4557137 -0.8360249
[2,] -0.4243608 -0.89815527  0.97140782  0.7681849 -0.7344393 -0.2787889
[3,] -0.6133672 -0.36361756  0.21256906  0.1175029  0.7209888  0.6764851
[4,]  0.1442848 -0.04302210 -0.08899074 -0.5685000 -0.2775922  0.2647343
[5,]  0.5757616 -0.02047648  0.39650626  0.7024048 -0.8987039  0.7285867
          [,91]      [,92]       [,93]       [,94]      [,95]      [,96]
[1,]  0.1426069 -0.3127180  0.77869264  0.61914494  0.7017324 -0.2528297
[2,] -0.9620941  0.4820473  0.50113955 -0.52766901 -0.3332555  0.4541013
[3,]  0.6830094  0.6781922 -0.75526152  0.00198412 -0.1250296 -0.9786078
[4,] -0.6624644 -0.9471921 -0.16316221 -0.26245961  0.1838914  0.3621843
[5,] -0.3896757  0.3038199  0.08716687  0.94215861 -0.8357998 -0.2302488
          [,97]       [,98]      [,99]    [,100]
[1,]  0.9809821 -0.70522609  0.8205492 0.7848228
[2,] -0.6587308  0.04162582 -0.5042561 0.5677183
[3,] -0.8249248  0.12506932 -0.2773442 0.1624450
[4,] -0.2336914  0.67622071  0.8990135 0.1774792
[5,]  0.3649738 -0.82514125 -0.7038752 0.3122566

| Tente encore une fois. ou tape info() pour plus d'options.

| mon_unif <- replicate(100, runif(5, -1, 1)) répétera le résultat 100 et
| stockera le résultat.

> mon_unif <- replicate(100, runif(5, -1, 1))

| All that practice is paying off!

  |=======================================================            |  82%
| Regardez le contenu de mon_unif.

> mon_unif
            [,1]        [,2]       [,3]        [,4]        [,5]       [,6]
[1,] -0.90495527  0.63713868 -0.0413919 -0.69604234 -0.66494915  0.7679640
[2,]  0.10143580  0.37589031 -0.5737913 -0.13190965  0.04169762 -0.6902510
[3,] -0.38166575 -0.08118473  0.6820891  0.85493122  0.18689929  0.8518822
[4,]  0.04673214 -0.59079388  0.2693842  0.09948425  0.26373182  0.5133722
[5,]  0.21552133 -0.77628455 -0.1438100 -0.56014905 -0.55992901  0.6105327
           [,7]        [,8]       [,9]      [,10]      [,11]      [,12]
[1,]  0.3427005 -0.51587436  0.9193628 -0.2418984 -0.2868537  0.5559165
[2,] -0.4964984 -0.33507491 -0.4799325 -0.2874295  0.6140392 -0.8590220
[3,] -0.6303897 -0.04200913  0.5861482 -0.7093687  0.9052785 -0.6725038
[4,]  0.1658718 -0.76498954 -0.1360870  0.1425172 -0.3297721 -0.2034205
[5,]  0.2030640  0.19748377  0.1736813 -0.4697393  0.7902510 -0.8106089
           [,13]      [,14]      [,15]      [,16]      [,17]      [,18]
[1,]  0.72104570 -0.9179407  0.3029136  0.5532818  0.6384867 -0.8131183
[2,] -0.42909156 -0.5280721 -0.8844003 -0.5424357  0.2673932 -0.5153637
[3,] -0.40933369 -0.7745184  0.0465159  0.1100174  0.7071452  0.8100943
[4,]  0.48815130 -0.8177947 -0.4920549  0.9987166 -0.9260892 -0.5241085
[5,]  0.08690325 -0.3622279 -0.6656221  0.5494180 -0.6533957 -0.1196143
           [,19]      [,20]      [,21]       [,22]       [,23]       [,24]
[1,]  0.00380421 -0.1516889 -0.1413767  0.03798557  0.43158659  0.85266180
[2,] -0.68080505 -0.8454882  0.1063537  0.55172842  0.71546847  0.06453515
[3,] -0.07595384 -0.7692347  0.5713597 -0.80400499  0.92383844 -0.85338327
[4,] -0.97779406  0.1174744  0.4872015  0.05868120  0.57887059 -0.20921803
[5,] -0.03697627  0.2542416 -0.6786329 -0.42955758 -0.05265248  0.91040526
          [,25]       [,26]      [,27]       [,28]      [,29]      [,30]
[1,] -0.6453514  0.27421964 -0.1345728 -0.58443064  0.3978373  0.5514563
[2,] -0.2292597 -0.91687191 -0.9224584  0.05717788  0.3325568 -0.2292875
[3,] -0.5744647 -0.76140288 -0.8457381 -0.79869347 -0.8660166  0.8200723
[4,] -0.6416952 -0.79975803 -0.6105191  0.99846736 -0.6481460  0.9229020
[5,] -0.8515236  0.06238312  0.2925595 -0.52659161 -0.7069656 -0.5074559
         [,31]       [,32]      [,33]       [,34]       [,35]      [,36]
[1,] 0.4795579  0.53375750  0.2896277  0.91538587 -0.57158579  0.8049999
[2,] 0.1020073 -0.50618225 -0.4951458 -0.86733824 -0.53118847  0.2421836
[3,] 0.3373518  0.66120242  0.3899072  0.09462447  0.09810707  0.9080101
[4,] 0.3966797 -0.61240050  0.9919176 -0.58324084 -0.10634601 -0.5424964
[5,] 0.6966674  0.06995134  0.9247273  0.09163074 -0.68878660  0.3209176
          [,37]       [,38]      [,39]       [,40]      [,41]      [,42]
[1,] -0.7625239 -0.88947516 -0.2645969  0.51927096  0.3714990  0.9099666
[2,]  0.9805569 -0.36578358  0.4128791  0.54667425  0.3186062 -0.3317152
[3,]  0.1635574  0.07647252  0.9656545  0.06282836 -0.7799729  0.7164645
[4,] -0.3441247  0.45585899  0.4877177 -0.45705037 -0.5757993 -0.4542738
[5,] -0.3176045 -0.63033740  0.9544961 -0.80848680  0.8397642  0.1709756
          [,43]      [,44]      [,45]      [,46]      [,47]      [,48]
[1,]  0.7362052  0.5124827  0.6274437  0.8937718 -0.5685363 -0.1297690
[2,]  0.4218735  0.7341608 -0.9685957 -0.9447907 -0.7510396 -0.3567630
[3,]  0.7982295  0.9024472 -0.7748710 -0.8051219 -0.7737490 -0.7962123
[4,]  0.3115013 -0.9037352  0.2530635 -0.6320773 -0.5693217  0.8455692
[5,] -0.9517817 -0.3687907  0.3562642 -0.6409451  0.6252199  0.7611835
          [,49]      [,50]      [,51]       [,52]      [,53]      [,54]
[1,]  0.3272601 -0.1955400  0.2606263 -0.18342709  0.7707025  0.9105450
[2,]  0.7500780  0.4290497 -0.9298504 -0.09533284 -0.8042840 -0.8346927
[3,] -0.2582493 -0.3816443 -0.2926994  0.76516892  0.1478868  0.5346252
[4,]  0.1636313 -0.9849730 -0.4015228  0.45657816  0.8125950  0.3732136
[5,]  0.6542190  0.8464258  0.7353469 -0.69424779  0.3063183 -0.8540930
          [,55]       [,56]      [,57]      [,58]       [,59]      [,60]
[1,] -0.7693307 -0.18132482 -0.6977575  0.3821165 -0.36493501  0.7147528
[2,]  0.6390730  0.04973872 -0.5446622 -0.1065002  0.01719919 -0.9729621
[3,]  0.6061448 -0.40457067  0.3138357  0.1914853  0.82342664  0.4823479
[4,] -0.4987246  0.50823081  0.8323392  0.2117020 -0.26065604  0.2362182
[5,]  0.7210060 -0.01930788 -0.2937284 -0.1190332 -0.37870022 -0.7378245
          [,61]      [,62]       [,63]      [,64]      [,65]       [,66]
[1,] -0.5615926 -0.4314595 -0.57277814 -0.3165392 -0.2452900 -0.50976254
[2,] -0.8677102  0.4109548  0.08271814 -0.5086229  0.5104086 -0.24415048
[3,]  0.4890258  0.7656952  0.98345398 -0.2790067 -0.6305710 -0.87678478
[4,]  0.2748258  0.5300657  0.25328456 -0.5493564 -0.5551347  0.86300629
[5,]  0.7647096 -0.2091090 -0.94236636  0.4127131  0.2884659 -0.05014127
          [,67]      [,68]      [,69]       [,70]       [,71]       [,72]
[1,]  0.8928319  0.3755623 -0.9532559  0.44061900 -0.98503084 -0.72421931
[2,] -0.2945673  0.8557810  0.5628513  0.11388243 -0.57187838  0.11405581
[3,]  0.6835031 -0.9062043  0.4801174  0.04042344 -0.97414994  0.26151414
[4,]  0.3806315  0.6219821  0.8515721 -0.06067251  0.04658485  0.17992850
[5,]  0.1141867 -0.7228054 -0.6329589 -0.39704146 -0.01650768  0.07610843
           [,73]       [,74]       [,75]       [,76]      [,77]      [,78]
[1,] -0.03927799 -0.07335334  0.76901155 -0.84776233  0.4382331  0.4553066
[2,] -0.04449141 -0.80901517 -0.01517607 -0.43799485  0.7498109  0.5350081
[3,] -0.14703437 -0.27719346 -0.61711384  0.48577580  0.5464351  0.5313885
[4,] -0.84497587 -0.53394934  0.46434276 -0.04227012 -0.9151232 -0.1020333
[5,]  0.88234944 -0.98105224  0.99848150 -0.77698198  0.8155570 -0.3879829
           [,79]      [,80]       [,81]      [,82]      [,83]       [,84]
[1,] -0.59554936  0.2587798 -0.03665351  0.8924772 -0.8704490 -0.83397954
[2,]  0.30383047  0.9105450  0.84007435  0.2076335  0.1321303 -0.40808197
[3,] -0.14039569 -0.2353201  0.11845816 -0.6486481 -0.1688494  0.74123330
[4,] -0.42602133 -0.2912391 -0.73345186 -0.7383172 -0.7610283  0.03502679
[5,] -0.05887339  0.4276629  0.13609105 -0.3378385  0.5718254 -0.78178590
          [,85]       [,86]       [,87]      [,88]      [,89]      [,90]
[1,] -0.8528565 -0.34815332 -0.55345272 -0.7192091 -0.5495648 -0.9824433
[2,] -0.6420518 -0.53139914 -0.73738109  0.7202489  0.7626409 -0.6065329
[3,] -0.2048221 -0.24150219  0.27903471  0.0227733 -0.8310215 -0.5095657
[4,] -0.7745646  0.09765944 -0.02056714 -0.1845027  0.5578764  0.1371684
[5,]  0.1349021  0.36020257 -0.25478503  0.7207533 -0.5519197  0.3400605
           [,91]      [,92]       [,93]       [,94]       [,95]      [,96]
[1,]  0.40787196 -0.1655073 -0.49336821 -0.03044443  0.34730530 -0.6580132
[2,]  0.66481190 -0.0890282 -0.08540808  0.17969543 -0.53126828  0.8942212
[3,] -0.59138824 -0.8792907  0.81227976  0.22248342  0.65532111  0.1306138
[4,]  0.74890761  0.5106791  0.08716656  0.62059148 -0.06407179  0.1007360
[5,]  0.07732315  0.8083398  0.58902684  0.81451245  0.30122961 -0.1028934
         [,97]      [,98]      [,99]     [,100]
[1,] 0.2925721 -0.4335452 -0.9918906  0.6984069
[2,] 0.3360054  0.3665968  0.6210335  0.1584036
[3,] 0.1024431  0.3080732  0.7937965 -0.2762145
[4,] 0.3644208  0.2938992 -0.5161354 -0.1443227
[5,] 0.2851448  0.2808974 -0.6381613  0.3571665

| C'est du bon boulot !

  |=========================================================          |  85%
| replicate() a créé une matrice, chaque colonne contient 5 nombres
| aléatoires issus de la distribution spécifiée. Nous pouvons trouvez
| maintenant trouver la moyenne dans chaque colonne à l'aide de colMeans().
| Stockez le résultat dans l'objet cm.

> cm <- colMeans(mon_unif)

| Keep working like that and you'll get there!

  |===========================================================        |  88%
| Regardons l'histogramme du résultat à l'aide de ggplot(data.frame(cm =
| cm)) + geom_histogram(aes(cm))

> ggplot(data.frame(cm = cm)) + geom_histogram(aes(cm))
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.

| C'est tout à fait ça !

  |=============================================================      |  91%
| Nos valeurs moyennes semblent presque suivre une distribution normale.
| C'est le théorème centrale limite, que vous n'avez peut-être pas vu.

...

  |===============================================================    |  94%
| Toutes les distributions aléatoires classiques sont incluses dans R, y
| compris exponentielle (rexp()), chi-deux (rchisq()), gamma (rgamma()), ...

...

  |=================================================================  |  97%
| Vous avez maintenant les bases des tirages aléatoires, même si nous
| n'avons fait que toucher le début du sujet.

...

  |===================================================================| 100%
| Souhaitez-vous soumettre votre progression sur Moodle à votre enseignant
| (cela ne fonctionnera que pour les étudiants de l'université Paris 8) ? Si
| vous ne le faites pas maintenant, vous pourrez toujours lui envoyer le
| fichier 'Tirages_aleatoires.txt' qui a été créé plus tard.

1: Non
2: Oui

Selection: 2

| Bon boulot !

| Tu es arrivé(e) au bout de cette leçon! Retour au menu principal...

| Choisis un cours ou tape 0 pour quitter Swirl.

1: InitiationR
2: Montre-moi le répertoire des cours Swirl !

Selection: