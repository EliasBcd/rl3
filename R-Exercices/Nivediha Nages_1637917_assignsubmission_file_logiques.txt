> library(swirl)
> install.packages('swirl')
Error in install.packages : Updating loaded packages
> install.packages("swirl")
Installing package into ‘/cloud/lib/x86_64-pc-linux-gnu-library/4.2’
(as ‘lib’ is unspecified)
trying URL 'http://rspm/default/__linux__/focal/latest/src/contrib/swirl_2.4.5.tar.gz'
Content type 'application/x-gzip' length 347115 bytes (338 KB)
==================================================
downloaded 338 KB

* installing *binary* package ‘swirl’ ...
* DONE (swirl)

The downloaded source packages are in
	‘/tmp/Rtmp8C0jEQ/downloaded_packages’
> library(swirl)
> uninstall_all_courses()

| Are you sure you want to uninstall all swirl courses? This will
| delete all of the contents of your swirl course directory.

1: Yes
2: No

Selection: 2
No courses were uninstalled.
NULL
> install_course_github('EliasBcd', 'InitiationR')
Downloading: 75 kB      
> select_language('french', append_rprofile = TRUE)
> swirl()

| Bienvenue sur Swirl ! Connecte-toi. Si ce n'est pas ta première
| connexion, indique ton nom utilisé précédemment. Si tu dois
| encore choisir ton nom, fais preuve d'un peu d'originalité !

Comment dois-je t'appeler ? Nivediha

| Merci, Nivediha. Quelques instructions de base avant d'attaquer
| la première leçon. Tout d'abord, si tu vois s'afficher '...',
| cela veut dire que tu dois appuyer sur Entrée quand tu as fini
| de lire et es prêt(e) à continuer.

...  <-- That's your cue to press Enter to continue

| Et quand tu vois 'Réponse:', le prompt R (>), ou si tu es
| invité(e) à sélectionner une option, c'est à toi de taper ta
| réponse et d'appuyer sur Entrée pour continuer.

Select 1, 2, or 3 and press Enter 

1: Continuer.
2: Avancer.
3: C'est parti !

Selection: 1

| You can exit swirl and return to the R prompt (>) at any time by
| pressing the Esc key. If you are already at the prompt, type
| bye() to exit and save your progress. When you exit properly,
| you'll see a short message letting you know you've done so.

| Quand tu es arrivé(e) au prompt R (>):
| -- Tape skip() pour sauter la question.
| -- Tape play() pour expérimenter et jouer avec R; Swirl en fera
| abstraction...
| -- JUSQU'A ce que tu tapes nxt() pour regagner l'attention de
| Swirl.
| -- Tape bye() pour quitter Swirl. Ta progression sera
| sauvegardée.
| -- Tape main() pour retourner au menu principal de Swirl.
| -- Tape info() pour montrer les options une nouvelle fois.

| C'est parti !

...

| Choisis un cours ou tape 0 pour quitter Swirl.

1: InitiationR
2: Montre-moi le répertoire des cours Swirl !

Selection: 1

| Choisis une leçon ou tape 0 pour retourner au menu principal.

 1: Manipulations simples
 2: Assignations et objets
 3: Types
 4: Vecteurs
 5: Fichiers et espace de travail
 6: Logique
 7: Valeurs manquantes
 8: Vecteurs numériques
 9: Dataframes
10: Scripts et fonctions
11: Control Flow

Selection: 6

| Attempting to load lesson dependencies...

| Cette leçon requiert le paquet ‘base64enc’ . Voudrais-tu que je
| l'installe pour toi maintenant ?

1: Oui
2: Non

Selection: 1

| Installation du paquet ‘base64enc’ maintenant...

| Le paquet ‘base64enc’ a été chargé correctement !

  |                                                         |   0%

| Cette leçon introduit les opérateurs et opérations logiques dans
| R.

...

  |==                                                       |   3%
| Comme nous l'avons déjà vu, il y a deux valeurs logiques dans R,
| aussi appelé valeurs booléennes, TRUE et FALSE. Dans R, il est
| possible de créer des expressions logiques dont le résultat sera
| TRUE ou FALSE.

...

  |====                                                     |   6%
| La création d'expressions logiques nécessite des opérateurs
| logiques. Nous avons déjà vu les opérateurs arithmétiques tel
| que `+`, `-`, `*` et `/`. Le premier opérateur logique à
| connaître est l'égalité, représenté par deux signes égalités
| `==`. Essayez d'utiliser cet opérateur pour trouver si TRUE et
| TRUE sont égaux.

> TRUE == TRUE
[1] TRUE

| Excellent work!

  |=====                                                    |   9%
| Tout comme les expressions arithmétiques, les expressions
| logiques peuvent être regroupées à l'aide de parenthèses et
| indiquer ainsi les priorités de calcul. Par exemple, le résultat
| de l'expression (TRUE == TRUE) == TRUE sera bien TRUE.

...

  |=======                                                  |  12%
| Testons cette propriété, essayez d'évaluer (FALSE == TRUE) ==
| FALSE .

> (FALSE == TRUE) == FALSE
[1] TRUE

| All that practice is paying off!

  |=========                                                |  16%
| L'opérateur d'égalité peut aussi servir à comparer des nombres.
| Utilisez-le pour savoir si 6 et 7 sont égaux.

> 6 == 7
[1] FALSE

| Excellent travail !

  |===========                                              |  19%
| Le résultat de l'expression précédente est FALSE, parce 6 est
| plus petit que 7. Heureusement pour nous, nous pouvons aussi
| tester les inégalités pour savoir si un nombre est plus petit ou
| plus grand qu'un autre.

...

  |============                                             |  22%
| L'opérateur plus petit que `<` teste si le nombre à gauche de
| l'opérateur est plus petit que le nombre à droite. Tapez une
| expression pour tester si 6 et plus petit que 7.

> 6 < 7
[1] TRUE

| C'est tout à fait ça !

  |==============                                           |  25%
| Il existe aussi un opérateur plus petit ou égal à `<=` qui teste
| si l'expression à gauche est plus petite ou égale à l'expression
| à droite. Essayez de voir si 10 est plus petit ou égal à 10.

> 10 <= 10
[1] TRUE

| Tu es extraordinaire !

  |================                                         |  28%
| On peut aussi utiliser les opérateurs plus grand que `>` et plus
| grand ou égal à `>=`.

...

  |==================                                       |  31%
| Voyons si vous avez compris. Laquelle des expressions suivantes
| à pour résultat FALSE ?

1: 0 > -36
2: 9 >= 10
3: 7 == 7
4: 6 < 8

Selection: 2

| All that hard work is paying off!

  |====================                                     |  34%
| Et maintenant, laquelle des expressions suivantes à pour
| résultat TRUE ?

1: 57 < 8
2: 7 == 9
3: -6 > -7
4: 9 >= 10

Selection: 3

| Your dedication is inspiring!

  |=====================                                    |  38%
| Intéressons maintenant à l'opérateur 'différent de' (= non-égal)
| représenté par `!=`. Différent de teste si deux valeurs sont
| différentes, de telle sorte que le résultat de TRUE != FALSE est
| TRUE. Tout comme l'opérateur égalité, l'opérateur différent de
| s'utilise aussi avec des nombres. Essayez d'écrire une
| expression pour savoir si 5 est différent de 7.

> 5 != è
Error: object 'è' not found
> 5 != 7
[1] TRUE

| Dans le mille ! Bien joué !

  |=======================                                  |  41%
| Il peut être utile de 'négativer' une expression avec
| l'opérateur NON. Un point d'exclamation `!` inversera les
| évaluations de TRUE et FALSE, de telle sorte que la valeur de
| !TRUE (lire : non TRUE) est FALSE et que la valeur de !FALSE
| (lire : non FALSE) est TRUE. Essayez d'utiliser l'opéraeur NON
| pour trouver l'inverse de 5 est égal à 7.

> ! 5 == 7
[1] TRUE

| Excellent work!

  |=========================                                |  44%
| Récapitulons. L'opérateur égal `==` teste si deux valeurs sont
| égales. L'opérateur différent de `!=` teste si deux valeurs sont
| différentes. L'opérateur NON `!` négative une expression logique
| de telle manière que TRUE devient FALSE et FALSE devient TRUE.

...

  |===========================                              |  47%
| Laquelle des expressions suivante est FALSE ?

1: 9 < 10
2: 7 != 8
3: !(0 >= -1)
4: !FALSE

Selection: 3

| Perseverance, that's the answer.

  |============================                             |  50%
| Quel est à votre avis le résultat de l'expression suivante :
| (TRUE != FALSE) == !(6 == 7)

1: Y a-t-il une vérité objective dans la programmation ?
2: %>%
3: TRUE
4: FALSE

Selection: 4

| Continue ! Tu trouveras !

| Essayez d'évaluer les expressions indépendamment pour trouver le
| résultat.

1: FALSE
2: TRUE
3: %>%
4: Y a-t-il une vérité objective dans la programmation ?

Selection: 2

| That's the answer I was looking for.

  |==============================                           |  53%
| Il est parfois nécessaire d'examiner les relations entre
| plusieurs expressions logiques. On utilise pour cela les
| opérateurs ET (AND) et OU (OR).

...

  |================================                         |  56%
| Regardons comment l'opérateur ET fonctionne. Il y a deux
| opérateurs ET dans R, `&` et `&&`. Les deux opérateurs sont
| similaires. Si les expressions à droite et à gauche de
| l'opérateur ET ont toutes les deux pour résultat TRUE, alors
| l'expression entière a pour résultat TRUE, sinon le résultat est
| FALSE. Par exemple, la valeur de TRUE & TRUE est TRUE. Essayez
| avec FALSE & FALSE.

> (FALSE && FALSE) == FALSE
[1] TRUE

| Try again. Getting it right on the first try is boring anyway!
| ou tape info() pour plus d'options.

| Tapez simplement FALSE & FALSE

> FALSE & FALSE
[1] FALSE

| Dans le mille ! Bien joué !

  |==================================                       |  59%
| Vous pouvez utilisez l'opérateur `&` pour évaluer ET suivant un
| vecteur. La version `&&` a besoin d'avoir une seule valeur
| logique à gauche et à droite pour fonctionner. Essayons les
| deux. Commencez par TRUE & c(TRUE, FALSE, FALSE).

> TRUE & c(TRUE,FALSE,FALSE)
[1]  TRUE FALSE FALSE

| Keep working like that and you'll get there!

  |====================================                     |  62%
| L'expression de gauche est recyclée (rappelez-vous la leçon sur
| les vecteurs) afin d'avoir la même longueur que le vecteur de
| droite. C'est comme si on avait écrit c(TRUE, TRUE, TRUE) &
| c(TRUE, FALSE, FALSE). Une expression comme cela fonctionnera
| différemment avec l'opérateur `&&`, R bloquant le recyclage du
| vecteur de gauche (et renvoit une alerte depuis la version
| 4.2.0).

...

  |=====================================                    |  66%
| Utilisons la même opération en remplaçant `&` par `&&`.

> TRUE && c(TRUE,FALSE,FALSE)
[1] TRUE
Warning message:
In TRUE && c(TRUE, FALSE, FALSE) :
  'length(x) = 3 > 1' in coercion to 'logical(1)'

| Tu es au top !

  |=======================================                  |  69%
| R nous renvoit un Warning et le résultat ! Un message commençant
| par Warning est une façon de communiquer pour R. R vous
| communique que l'opération que vous êtes en train de faire est
| possible (il vous donne un résultat), mais qu'elle lui semble
| suspecte. En fait, ici R utilise uniquement le premier élément
| du vecteur de droite. Ce comportement est amené à disparaître
| dans les futures versions de R, je ne vous encourage donc pas à
| l'utiliser. Le principal intérêt de l'opérateur `&&` est de vous
| garantir que le résultat a une longueur de 1. Cela nous servira
| dans la suite du cours.

...

  |=========================================                |  72%
| L'opérateur OU fonctionne d'une manière similaire. `|` recycle
| les vecteurs si besoin, alors que `||` renvoit un résultat de
| longueur 1.

...

  |===========================================              |  75%
| OU renvoit TRUE si l'expression de droite ou l'expression de
| gauche est TRUE. Il renvoit FALSE sinon.

...

  |=============================================            |  78%
| Testons la version vectorielle de OU. Tapez la commande TRUE |
| c(TRUE, FALSE, FALSE).

> c(TRUE, FALSE, FALSE)
[1]  TRUE FALSE FALSE

| Continue ! Tu trouveras ! ou tape info() pour plus d'options.

| Tapez la commande TRUE | c(TRUE, FALSE, FALSE).

> TRUE | c(TRUE, FALSE, FALSE)
[1] TRUE TRUE TRUE

| Bravo!

  |==============================================           |  81%
| Les opérateurs logiques peuvent être chainés, tout comme les
| opérations arithmétiques. Les expressions `6 != 10 && FALSE && 1
| >= 2` ou `TRUE || 5 < 9.3 || FALSE` sont tout à fait normales.

...

  |================================================         |  84%
| Les opérations arithmétiques ont un ordre de priorité. Il en est
| de même pour les expressions logiques. Tous les opérateurs ET
| sont évalués avant les opérateurs OU. Essayez cet exemple un peu
| ambigu 5 > 8 || 6 != 8 && 4 > 3.9.

> 5 > 8 || 6 != && 4 > 3.9
Error: unexpected '&&' in "5 > 8 || 6 != &&"
> 5 > 8 || 6 != 8 && 4 > 3.9.
Error: unexpected symbol in "5 > 8 || 6 != 8 && 4 > 3.9."
> 5 > 8 || 6 != 8 && 4 > 3.9
[1] TRUE

| Bravo!

  |==================================================       |  88%
| Regardons l'ordre des opérations dans cet exemple. ET est
| prioritaire sur OU. On commence donc par évaluer les expressions
| à gauche et à droite de &&. 6 est bien différent de 8, donc le
| résultat à gauche est TRUE. 4 est bien plus grand que 3.9, donc
| le résultat à droite est aussi TRUE. Le résultat de TRUE && TRUE
| est TRUE. On peut maintenant regarder ce qui se passe autour de
| ||. À droite, on a TRUE, à gauche, 5 n'est pas plus grand que 8,
| donc le résultat est FALSE. FALSE || TRUE a pour résultat TRUE,
| ce qui nous donne bien le résultat final.

...

  |====================================================     |  91%
| Quelle expression a pour résultat TRUE ?

1: TRUE && FALSE || 9 >= 4 && 3 < 6
2: TRUE && 62 < 62 && 44 >= 44
3: FALSE || TRUE && FALSE
4: 99.99 > 100 || 45 < 7.3 || 4 != 4.0

Selection: 1

| Tu assures !

  |=====================================================    |  94%
| Quelle expression a pour résultat FALSE ?

1: 6 >= -9 && !(6 > 7) && !(!TRUE)
2: FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
3: !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79
4: FALSE || TRUE && 6 != 4 || 9 > 4

Selection: 2

| Tu es au top !

  |=======================================================  |  97%
| C'est la fin de l'introduction à l'évaluation des expressions
| logiques dans R.

...

  |=========================================================| 100%
| Souhaitez-vous soumettre votre progression sur Moodle à votre
| enseignant (cela ne fonctionnera que pour les étudiants de
| l'université Paris 8) ? Si vous ne le faites pas maintenant,
| vous pourrez toujours lui envoyer le fichier 'Logique.txt' qui a
| été créé plus tard.

1: Non
2: Oui

Selection: 2

| Continue comme ça !

| Tu es arrivé(e) au bout de cette leçon! Retour au menu
| principal...

| Choisis un cours ou tape 0 pour quitter Swirl.

1: InitiationR
2: Montre-moi le répertoire des cours Swirl !

Selection: 